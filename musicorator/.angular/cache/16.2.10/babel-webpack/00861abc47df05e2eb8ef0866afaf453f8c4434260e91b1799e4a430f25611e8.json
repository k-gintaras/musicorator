{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../electron-communicator.service\";\nimport * as i2 from \"../helper.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/checkbox\";\nimport * as i8 from \"@angular/material/progress-bar\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"../music-tagging/music-tagging.component\";\nimport * as i12 from \"../anti-spam-click.directive\";\nfunction MusicTaggerListComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\", 15);\n    i0.ɵɵlistener(\"debounceClick\", function MusicTaggerListComponent_div_8_Template_div_debounceClick_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const file_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.setCurrentFile(file_r2));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 16)(4, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function MusicTaggerListComponent_div_8_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const file_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.playSong(file_r2));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"play_arrow\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const file_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.currentFile === file_r2 ? \"row selected\" : \"row\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"debounceTime\", 1000);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getFileName(file_r2), \" \");\n  }\n}\nfunction MusicTaggerListComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Loading... \");\n    i0.ɵɵelement(2, \"mat-progress-bar\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r1.progress);\n  }\n}\nexport var KEY_CODE = /*#__PURE__*/function (KEY_CODE) {\n  KEY_CODE[\"RIGHT_ARROW\"] = \"ArrowRight\";\n  KEY_CODE[\"LEFT_ARROW\"] = \"ArrowLeft\";\n  KEY_CODE[\"ENTER\"] = \"ENTER\";\n  return KEY_CODE;\n}(KEY_CODE || {});\nexport let MusicTaggerListComponent = /*#__PURE__*/(() => {\n  class MusicTaggerListComponent {\n    keyEvent(event) {\n      if (event.key === KEY_CODE.RIGHT_ARROW) {\n        this.loadNextTrack();\n      }\n      if (event.key === KEY_CODE.LEFT_ARROW) {\n        this.loadPreviousTrack();\n      }\n    }\n    constructor(communicator, helper) {\n      this.communicator = communicator;\n      this.helper = helper;\n      this.isPlayAndData = true;\n      this.currentFolder = 'C:/Users';\n      this.fileContains = '.mp3';\n      this.folders = [];\n      // allow next song\n      this.currentFilePositionInArray = 0;\n      this.isAutoplay = false;\n    }\n    ngOnInit() {\n      this.setProgressAndFeedback(false, '', false);\n      this.subscriptions = [];\n      this.subscriptions.push(this.setLoadFolderListener());\n      this.subscriptions.push(this.setGetFilesByTypeListener());\n      this.subscriptions.push(this.setPlaySongListener());\n      this.subscriptions.push(this.setGetSongListener());\n    }\n    ngOnDestroy() {\n      for (const subscription of this.subscriptions) {\n        subscription.unsubscribe();\n      }\n    }\n    loadPreviousTrack() {\n      this.setNextOrPreviousTrack(-1);\n    }\n    loadNextTrack() {\n      this.setNextOrPreviousTrack(1);\n    }\n    setNextOrPreviousTrack(next) {\n      this.setValidatedPosition(next);\n      const file = this.folders[this.currentFilePositionInArray];\n      this.setCurrentFile(file);\n    }\n    setValidatedPosition(next) {\n      this.currentFilePositionInArray += next;\n      if (this.currentFilePositionInArray < 0) {\n        this.currentFilePositionInArray = this.folders.length - 1;\n      }\n      if (this.currentFilePositionInArray > this.folders.length - 1) {\n        this.currentFilePositionInArray = 0;\n      }\n    }\n    setCurrentFile(file) {\n      this.currentFile = file;\n      this.getSongData();\n      if (this.isAutoplay) {\n        this.playSong(file);\n      }\n    }\n    playSong(file) {\n      this.currentFile = file;\n      const options = {\n        key: 'playAudio',\n        dir: file\n      };\n      this.setProgressAndFeedback(true, 'Playing Audio...', false);\n      this.communicator.sendToElectron(options);\n      if (this.isPlayAndData) {\n        this.getSongData();\n      }\n    }\n    openFolder() {\n      const options = {\n        key: 'openDirectory'\n      };\n      this.setProgressAndFeedback(true, 'Opening Directory...', true);\n      this.communicator.sendToElectron(options);\n    }\n    getFilesByType() {\n      const options = {\n        key: 'getFilesByType',\n        dir: this.currentFolder,\n        type: this.fileContains\n      };\n      this.setProgressAndFeedback(true, 'Getting Files...', true);\n      this.communicator.sendToElectron(options);\n    }\n    getSongData() {\n      const options = {\n        key: 'getMusicData',\n        dir: this.currentFile\n      };\n      this.setProgressAndFeedback(true, 'Getting Audio Data...', false);\n      this.communicator.sendToElectron(options);\n    }\n    setLoadFolderListener() {\n      return this.communicator.listenToElectronConstantly('openDirectory').subscribe(result => {\n        this.currentFolder = result;\n        this.setProgressAndFeedback(false, 'Opened Directory.', true);\n        setTimeout(() => {\n          this.getFilesByType();\n        }, 500);\n      });\n    }\n    setGetFilesByTypeListener() {\n      return this.communicator.listenToElectronConstantly('getFilesByType').subscribe(result => {\n        this.folders = result;\n        this.setProgressAndFeedback(false, 'Received Files.', true);\n      });\n    }\n    setPlaySongListener() {\n      return this.communicator.listenToElectronConstantly('playAudio').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Played Audio.', false);\n      });\n    }\n    setGetSongListener() {\n      return this.communicator.listenToElectronConstantly('getMusicData').subscribe(result => {\n        this.currentMetaDataObject = result;\n        this.setProgressAndFeedback(false, 'Received Audio Data.', false);\n      });\n    }\n    getFileName(name) {\n      return this.communicator.getFileName(name);\n    }\n    setProgressAndFeedback(b, s, isImportant) {\n      this.isLoading = b;\n      if (!b) {\n        this.progress = 100;\n      }\n      if (b) {\n        this.progress = 0;\n        this.feedbackCounter = 0;\n      }\n      if (s) {\n        this.feedback(s, isImportant);\n      }\n    }\n    getFeedBack() {\n      return this.currentFeedback;\n    }\n    feedback(s, isImportant) {\n      if (isImportant) {\n        this.helper.feedback(JSON.stringify(s));\n      }\n      this.currentFeedback = JSON.stringify(s);\n    }\n    static #_ = this.ɵfac = function MusicTaggerListComponent_Factory(t) {\n      return new (t || MusicTaggerListComponent)(i0.ɵɵdirectiveInject(i1.ElectronCommunicatorService), i0.ɵɵdirectiveInject(i2.HelperService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MusicTaggerListComponent,\n      selectors: [[\"app-music-tagger-list\"]],\n      hostBindings: function MusicTaggerListComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keyup\", function MusicTaggerListComponent_keyup_HostBindingHandler($event) {\n            return ctx.keyEvent($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      inputs: {\n        fileContains: \"fileContains\"\n      },\n      decls: 21,\n      vars: 8,\n      consts: [[1, \"container-fluid\"], [1, \"menu\"], [3, \"currentFile\", \"currentMetadataObject\"], [1, \"row\"], [1, \"checkbox\"], [3, \"ngModel\", \"ngModelChange\"], [\"class\", \"row\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [2, \"width\", \"100px\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-fab\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [4, \"ngIf\"], [1, \"container-fluid\", 2, \"height\", \"500px\"], [1, \"row\", 3, \"ngClass\"], [\"appAntiSpamClick\", \"\", 1, \"col-10\", \"button-align\", \"clickable-text\", 3, \"debounceTime\", \"debounceClick\"], [1, \"col-2\"], [\"mat-mini-fab\", \"\", \"color\", \"white\", \"aria-label\", \"Play\", 1, \"mini-button\", 3, \"click\"], [\"mode\", \"determinate\", 3, \"value\"]],\n      template: function MusicTaggerListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵelement(2, \"app-music-tagging\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 0)(4, \"div\", 3)(5, \"div\", 4)(6, \"mat-checkbox\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicTaggerListComponent_Template_mat_checkbox_ngModelChange_6_listener($event) {\n            return ctx.isAutoplay = $event;\n          });\n          i0.ɵɵtext(7, \"Auto Play\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, MusicTaggerListComponent_div_8_Template, 7, 3, \"div\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"span\", 7);\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 8)(12, \"mat-form-field\", 9)(13, \"mat-label\");\n          i0.ɵɵtext(14, \"File Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"input\", 10);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicTaggerListComponent_Template_input_ngModelChange_15_listener($event) {\n            return ctx.fileContains = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"button\", 11);\n          i0.ɵɵlistener(\"debounceClick\", function MusicTaggerListComponent_Template_button_debounceClick_16_listener() {\n            return ctx.openFolder();\n          });\n          i0.ɵɵelementStart(17, \"mat-icon\");\n          i0.ɵɵtext(18, \"folder_open\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(19, MusicTaggerListComponent_div_19_Template, 3, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"div\", 13);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"currentFile\", ctx.currentFile)(\"currentMetadataObject\", ctx.currentMetaDataObject);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.isAutoplay);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.folders);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" Last action:\", ctx.currentFeedback, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.fileContains);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.MatIcon, i6.MatMiniFabButton, i6.MatFabButton, i7.MatCheckbox, i8.MatProgressBar, i9.MatInput, i10.MatFormField, i10.MatLabel, i11.MusicTaggingComponent, i12.AntiSpamClickDirective]\n    });\n  }\n  return MusicTaggerListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}