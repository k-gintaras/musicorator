{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { ValidRequest } from './ValidRequest';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./helper.service\";\nimport * as i2 from \"./test-data.service\";\nimport * as i3 from \"./tagging-from-file/suggestion.service\";\nexport let CommunicatorElectronService = /*#__PURE__*/(() => {\n  class CommunicatorElectronService {\n    constructor(zone, helper, t, suggestionService) {\n      this.zone = zone;\n      this.helper = helper;\n      this.t = t;\n      this.suggestionService = suggestionService;\n      // these needed to simulate data if you just use ng serve\n      this.electronReceiveSimulatorSubject = new BehaviorSubject('');\n      this.electronReceiveSimulatorObservable = this.electronReceiveSimulatorSubject.asObservable();\n      this.electronSendSimulatorSubject = new BehaviorSubject('');\n      this.electronSendSimulatorObservable = this.electronSendSimulatorSubject.asObservable();\n      if (window.require) {\n        try {\n          this.ipc = window.require('electron').ipcRenderer;\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log('Could not load electron ipc.');\n        console.log('Loading Angular simulator.');\n      }\n    }\n    /**\n     * keep in mind that ngOnInit might not resubscribe to this\n     * responseFromMain to use onDestroy in addition to unsubscribe\n     */\n    unsubscribeElectron() {\n      if (this.mainResponseListener) {\n        try {\n          this.ipc.removeListener('responseFromMain', this.mainResponseListener);\n        } catch (error) {\n          console.log(error);\n        }\n        if (this.mainResponseSubscriber) {\n          try {\n            this.mainResponseSubscriber.unsubscribe();\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n    }\n    sendToElectron(options) {\n      if (this.ipc) {\n        this.sendElectron(options);\n      } else {\n        this.sendAngular(options);\n      }\n    }\n    sendElectron(options) {\n      this.ipc.send('requestFromRenderer', options);\n    }\n    sendAngular(options) {\n      console.log('Sending to Electron: ' + options.key);\n      this.electronSendSimulatorSubject.next(options);\n    }\n    /**\n     * responseFromMain\n     * {key: string, response: any}\n     */\n    listenToElectronResponsibly(key) {\n      if (this.ipc) {\n        return this.listenElectronResponsibly(key);\n      } else {\n        return this.listenAngularResponsibly();\n      }\n    }\n    listenElectronResponsibly(keyIn) {\n      return new Observable(subscriber => {\n        this.mainResponseSubscriber = subscriber;\n        try {\n          // needed to remove listener on destroy, eventviewer memory leak error handling\n          this.mainResponseListener = (event, arg) => {\n            this.zone.run(() => {\n              subscriber.next(arg);\n              // subscriber.complete(); if you want to stop from listening next values\n            });\n          };\n\n          this.ipc.on(keyIn, this.mainResponseListener);\n        } catch (error) {\n          this.feedback('Electron Communicator Error: ' + error);\n          subscriber.next({\n            key: keyIn,\n            response: 'listenElectronResponsibly() Error: ' + keyIn\n          });\n          subscriber.complete();\n        }\n      });\n    }\n    listenAngularResponsibly() {\n      this.electronSendSimulatorObservable.subscribe(response => {\n        console.log('Received Request From Angular: ');\n        console.log(response);\n        this.handleSimulatedResponse(response);\n      });\n      return this.electronReceiveSimulatorObservable;\n    }\n    handleSimulatedResponse(r) {\n      const key = r.key;\n      const data = r.response;\n      const responseObject = {\n        key: 'testResponseOne',\n        response: JSON.parse(this.suggestionService.suggestionsJson)\n      };\n      try {\n        switch (key) {\n          case ValidRequest.getFilesByType:\n            console.log('Replying to: ' + ValidRequest.getFilesByType);\n            responseObject.key = ValidRequest.getFilesByType;\n            responseObject.response = this.t.getTestFolders();\n            this.electronReceiveSimulatorSubject.next(responseObject);\n            break;\n          case ValidRequest.getAllMusicData:\n            console.log('Replying to: ' + ValidRequest.getAllMusicData);\n            responseObject.key = ValidRequest.getAllMusicData;\n            responseObject.response = this.t.getTestData();\n            this.electronReceiveSimulatorSubject.next(responseObject);\n            break;\n          case ValidRequest.getMusicData:\n            console.log('Replying to: ' + ValidRequest.getMusicData);\n            responseObject.key = ValidRequest.getMusicData;\n            responseObject.response = this.t.getTestData()[0].data;\n            this.electronReceiveSimulatorSubject.next(responseObject);\n            break;\n          case ValidRequest.getSettings:\n            console.log('Replying to: ' + ValidRequest.getSettings);\n            responseObject.key = ValidRequest.getSettings;\n            responseObject.response = JSON.parse(this.suggestionService.suggestionsJson);\n            this.electronReceiveSimulatorSubject.next(responseObject);\n            break;\n          case ValidRequest.openDirectory:\n            console.log('Replying to: ' + ValidRequest.openDirectory);\n            responseObject.key = ValidRequest.openDirectory;\n            responseObject.response = 'C:/Users';\n            this.electronReceiveSimulatorSubject.next(responseObject);\n            break;\n          default:\n            break;\n        }\n      } catch (error) {\n        this.feedback('Electron Communicator Error: ' + error);\n        this.electronReceiveSimulatorSubject.next('listenToElectronConstantly Error: ' + key);\n        this.electronReceiveSimulatorSubject.complete();\n      }\n    }\n    getFileName(dir) {\n      if (dir) {\n        return dir.replace(/^.*[\\\\\\/]/, '');\n      }\n      return dir;\n    }\n    feedback(s) {\n      this.helper.feedback(s);\n    }\n    static #_ = this.ɵfac = function CommunicatorElectronService_Factory(t) {\n      return new (t || CommunicatorElectronService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.HelperService), i0.ɵɵinject(i2.TestDataService), i0.ɵɵinject(i3.SuggestionService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CommunicatorElectronService,\n      factory: CommunicatorElectronService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CommunicatorElectronService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}