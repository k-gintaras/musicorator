{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../electron-communicator.service\";\nimport * as i2 from \"../helper.service\";\nimport * as i3 from \"../popup/popup.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/progress-bar\";\nimport * as i9 from \"@angular/material/sort\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"../anti-spam-click.directive\";\nfunction MusicSorterComponent_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"th\")(1, \"input\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function MusicSorterComponent_th_6_Template_input_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const item_r4 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(item_r4.search = $event);\n    })(\"ngModelChange\", function MusicSorterComponent_th_6_Template_input_ngModelChange_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.setFilter());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", item_r4.column === \"tags\" ? \"tag,tag\" : item_r4.column);\n    i0.ɵɵproperty(\"ngModel\", item_r4.search);\n  }\n}\nfunction MusicSorterComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 17)(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"mat-sort-header\", item_r8.column);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r8.column);\n  }\n}\nfunction MusicSorterComponent_tr_11_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r11 = ctx.$implicit;\n    const song_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", song_r9.simple[item_r11.column], \" \");\n  }\n}\nfunction MusicSorterComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 18);\n    i0.ɵɵlistener(\"click\", function MusicSorterComponent_tr_11_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const song_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.openDialog(song_r9.simple.title, song_r9.dir, song_r9.metadata));\n    });\n    i0.ɵɵtemplate(1, MusicSorterComponent_tr_11_td_1_Template, 2, 1, \"td\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const song_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.currentSongTitle === song_r9.simple.title ? \"clickable-text selected\" : \"clickable-text not-selected\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.searchStringsArray);\n  }\n}\nfunction MusicSorterComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Loading... \");\n    i0.ɵɵelement(2, \"mat-progress-bar\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r3.progress);\n  }\n}\nexport let MusicSorterComponent = /*#__PURE__*/(() => {\n  class MusicSorterComponent {\n    constructor(communicator, helper, dialog) {\n      this.communicator = communicator;\n      this.helper = helper;\n      this.dialog = dialog;\n      this.folder = 'C:/Users';\n      this.fileContains = '.mp3';\n      this.folders = [];\n      this.isLoading = false;\n      this.progress = 0;\n      this.newDir = '';\n      this.lessThan = true;\n      this.maxFeedbackValue = 0;\n      this.searchStringsArray = [{\n        column: 'title',\n        search: ''\n      }, {\n        column: 'artist',\n        search: ''\n      }, {\n        column: 'album',\n        search: ''\n      }, {\n        column: 'composer',\n        search: ''\n      }, {\n        column: 'genre',\n        search: ''\n      }, {\n        column: 'year',\n        search: ''\n      }, {\n        column: 'bpm',\n        search: ''\n      }, {\n        column: 'initialKey',\n        search: ''\n      }, {\n        column: 'tags',\n        search: ''\n      }];\n      this.subscriptions = [];\n      this.musicSortables = [];\n      this.filteredMusic = [];\n    }\n    ngOnInit() {\n      this.setProgressAndFeedback(false, '', false);\n      this.musicSortables = [];\n      this.subscriptions = [];\n      this.subscriptions.push(this.setLoadFolderListener());\n      this.subscriptions.push(this.setAllMusicDataListener());\n      this.subscriptions.push(this.setFeedbackListener());\n      this.subscriptions.push(this.setGetFilesByTypeListener());\n      this.subscriptions.push(this.setMakeDirListener());\n    }\n    ngOnDestroy() {\n      for (const subscription of this.subscriptions) {\n        if (subscription) {\n          try {\n            subscription.unsubscribe();\n          } catch (error) {}\n        }\n      }\n    }\n    makeDir() {\n      const newFolder = this.getGeneratedDirectoryName();\n      const options = {\n        key: 'createFolder',\n        where: this.folder,\n        name: newFolder\n      };\n      if (this.folder && this.folders && newFolder) {\n        this.setProgressAndFeedback(true, 'Creating Directory...', true);\n        this.communicator.sendToElectron(options);\n      } else {\n        this.feedback('Directory empty. Make.', true);\n      }\n    }\n    copyDir() {\n      this.makeDir();\n    }\n    copyDirectory() {\n      const options = {\n        key: 'copyAllFiles',\n        folder: this.folder,\n        name: this.getGeneratedDirectoryName(),\n        folders: this.getFilteredFiles()\n      };\n      if (this.folder && this.folders) {\n        this.maxFeedbackValue = options.folders.length;\n        this.setProgressAndFeedback(true, 'Copying Directory...', true);\n        this.communicator.sendToElectron(options);\n      } else {\n        this.feedback('Directory empty. Copy.', true);\n      }\n    }\n    getGeneratedDirectoryName() {\n      const values = [];\n      for (const val of this.searchStringsArray) {\n        const search = val.search;\n        if (search) {\n          values.push(search);\n        }\n      }\n      return values.join('-');\n    }\n    getFileName(n) {\n      return this.communicator.getFileName(n);\n    }\n    openFolder() {\n      const options = {\n        key: 'openDirectory'\n      };\n      this.setProgressAndFeedback(true, 'Opening Directory...', true);\n      this.communicator.sendToElectron(options);\n    }\n    getFilesByType() {\n      const options = {\n        key: 'getFilesByType',\n        dir: this.folder,\n        type: this.fileContains\n      };\n      this.setProgressAndFeedback(true, 'Getting Files...', true);\n      this.communicator.sendToElectron(options);\n    }\n    loadAllFiles() {\n      const options = {\n        key: 'getAllMusicData',\n        folders: this.folders\n      };\n      this.maxFeedbackValue = this.folders.length;\n      this.setProgressAndFeedback(true, 'Getting Music Data...', true);\n      this.communicator.sendToElectron(options);\n    }\n    setLoadFolderListener() {\n      return this.communicator.listenToElectronConstantly('openDirectory').subscribe(result => {\n        if (result) {\n          this.folder = result;\n          this.newDir = result;\n          this.musicSortables = [];\n          this.filteredMusic = [];\n          this.folders = [];\n          this.setProgressAndFeedback(false, 'Opened Directory.', true);\n          setTimeout(() => {\n            this.getFilesByType();\n          }, 500);\n        } else {\n          this.setProgressAndFeedback(false, 'Open folder failed.', true);\n        }\n      });\n    }\n    setGetFilesByTypeListener() {\n      return this.communicator.listenToElectronConstantly('getFilesByType').subscribe(result => {\n        if (result) {\n          this.folders = result;\n          this.setProgressAndFeedback(false, 'Received Files.', true);\n          setTimeout(() => {\n            this.loadAllFiles();\n          }, 500);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Files failed.', true);\n        }\n      });\n    }\n    setAllMusicDataListener() {\n      return this.communicator.listenToElectronConstantly('getAllMusicData').subscribe(result => {\n        if (result) {\n          this.loadSortableObjects(result);\n          this.setProgressAndFeedback(false, 'Received Data.', true);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Data failed.', true);\n        }\n      });\n    }\n    setFeedbackListener() {\n      this.feedbackCounter = 0;\n      return this.communicator.listenToElectronConstantly('getFeedback').subscribe(result => {\n        this.feedbackCounter++;\n        this.updateProgress(this.feedbackCounter);\n        this.feedback(result, false);\n      });\n    }\n    setMakeDirListener() {\n      return this.communicator.listenToElectronConstantly('createFolder').subscribe(result => {\n        this.copyDirectory();\n        this.setProgressAndFeedback(false, result, true);\n      });\n    }\n    setCopyAllFilesListener() {\n      return this.communicator.listenToElectronConstantly('copyAllFiles').subscribe(() => {\n        this.setProgressAndFeedback(false, 'Copied Files.', true);\n      });\n    }\n    loadSortableObjects(result) {\n      for (const electronObject of result) {\n        const o = this.getMusicSortableObject(electronObject);\n        this.musicSortables.push(o);\n        this.filteredMusic.push(o);\n      }\n    }\n    getMusicSortableObject(o) {\n      const file = o.file;\n      const data = o.data;\n      const emptyString = 'empty';\n      const emptyNumber = 0;\n      let validatedTags = emptyString;\n      let validatedBpm = emptyNumber;\n      if (data.comment) {\n        if (data.comment.text) {\n          validatedTags = data.comment.text.trim();\n        }\n      }\n      if (data.bpm) {\n        validatedBpm = this.helper.getParsedIntSimple(data.bpm.trim(), emptyNumber);\n      }\n      const musicObject = {\n        dir: file,\n        simple: {\n          title: data.title ? data.title.trim() : emptyString,\n          artist: data.artist ? data.artist.trim() : emptyString,\n          album: data.album ? data.album.trim() : emptyString,\n          composer: data.composer ? data.composer.trim() : emptyString,\n          genre: data.genre ? data.genre.trim() : emptyString,\n          year: data.year ? data.year.trim() : emptyString,\n          bpm: validatedBpm,\n          initialKey: data.initialKey ? data.initialKey.trim() : emptyString,\n          tags: validatedTags\n        },\n        tags: this.getTagsFromData(data),\n        metadata: data\n      };\n      return musicObject;\n    }\n    getTagsFromData(data) {\n      if (data) {\n        if (data.comment) {\n          if (data.comment.text) {\n            return this.getCommentAsArray(data.comment.text);\n          }\n        }\n      }\n      return [];\n    }\n    getCommentAsArray(comment) {\n      if (comment) {\n        const c = comment.toString();\n        const arr = c.split(',');\n        if (arr) {\n          const trimedArr = arr.map(str => str.trim().toLowerCase());\n          return trimedArr;\n        }\n      }\n      return [''];\n    }\n    updateProgress(count) {\n      const percentageProgress = count * 100 / this.maxFeedbackValue;\n      this.progress = Math.round(percentageProgress);\n    }\n    setProgressAndFeedback(b, s, isImportant) {\n      this.isLoading = b;\n      if (!b) {\n        this.progress = 100;\n      }\n      if (b) {\n        this.progress = 0;\n        this.feedbackCounter = 0;\n      }\n      if (s) {\n        this.feedback(s, isImportant);\n      }\n    }\n    feedback(s, isImportant) {\n      if (isImportant) {\n        this.helper.feedback(JSON.stringify(s));\n      }\n      this.currentFeedback = JSON.stringify(s);\n    }\n    openDialog(titleIn, message, codeIn) {\n      this.currentSongTitle = titleIn;\n      const dialogMessage = {\n        title: 'Music Data',\n        list: [{\n          title: titleIn,\n          content: message\n        }],\n        code: codeIn\n      };\n      this.dialog.openDialog(dialogMessage).then(reply => {});\n    }\n    getFilteredFiles() {\n      const files = [];\n      for (const val of this.filteredMusic) {\n        files.push(val.dir);\n      }\n      return files;\n    }\n    setFilter() {\n      this.newDir = this.folder + '/' + this.getGeneratedDirectoryName().split(',').join('-');\n      this.filteredMusic = this.musicSortables.filter(item => {\n        for (const val of this.searchStringsArray) {\n          const searchColumn = val.column;\n          const b = val.search;\n          if (b) {\n            const a = item.simple[searchColumn];\n            const match = this.isMatch(a, b);\n            if (searchColumn === 'tags') {\n              if (a) {\n                const tags = b.split(',');\n                for (const tag of tags) {\n                  const matchTag = this.isMatch(a, tag);\n                  if (!matchTag) {\n                    return false;\n                  }\n                }\n              }\n            } else {\n              if (!match) {\n                return false;\n              }\n            }\n          }\n        }\n        return true;\n      });\n    }\n    setFilterMoreThan() {\n      this.lessThan = !this.lessThan;\n      this.setFilter();\n    }\n    clearSearch() {\n      for (const val of this.searchStringsArray) {\n        val.search = '';\n      }\n      this.setFilter();\n    }\n    isMatch(a, b) {\n      if (!isNaN(a)) {\n        const bParsed = this.helper.getParsedIntSimple(b, 0);\n        if (this.lessThan) {\n          return a < bParsed;\n        } else {\n          return bParsed < a;\n        }\n      }\n      return a.toLowerCase().indexOf(b + ''.toLowerCase()) > -1;\n    }\n    sortData(sort) {\n      this.filteredMusic = this.filteredMusic.sort((a, b) => {\n        const isAsc = sort.direction === 'asc';\n        switch (sort.active) {\n          case 'title':\n            return this.compare(a.simple.title, b.simple.title, isAsc);\n          case 'artist':\n            return this.compare(a.simple.artist, b.simple.artist, isAsc);\n          case 'album':\n            return this.compare(a.simple.album, b.simple.album, isAsc);\n          case 'composer':\n            return this.compare(a.simple.composer, b.simple.composer, isAsc);\n          case 'genre':\n            return this.compare(a.simple.genre, b.simple.genre, isAsc);\n          case 'year':\n            return this.compare(a.simple.year, b.simple.year, isAsc);\n          case 'bpm':\n            return this.compare(a.simple.bpm, b.simple.bpm, isAsc);\n          case 'initialKey':\n            return this.compare(a.simple.initialKey, b.simple.initialKey, isAsc);\n          case 'tags':\n            return this.compare(a.simple.tags, b.simple.tags, isAsc);\n          default:\n            return 0;\n        }\n      });\n    }\n    compare(a, b, isAsc) {\n      return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n    }\n    static #_ = this.ɵfac = function MusicSorterComponent_Factory(t) {\n      return new (t || MusicSorterComponent)(i0.ɵɵdirectiveInject(i1.ElectronCommunicatorService), i0.ɵɵdirectiveInject(i2.HelperService), i0.ɵɵdirectiveInject(i3.PopupService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MusicSorterComponent,\n      selectors: [[\"app-music-sorter\"]],\n      decls: 32,\n      vars: 9,\n      consts: [[1, \"table-dark\", \"table\"], [\"matSort\", \"\", 1, \"table\", \"table-striped\", \"table-dark\", 2, \"table-layout\", \"fixed\", 3, \"matSortChange\"], [1, \"thead-light\"], [4, \"ngFor\", \"ngForOf\"], [3, \"mat-sort-header\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [2, \"width\", \"100px\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-fab\", \"\", \"color\", \"warn\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [1, \"mini-button\"], [\"mat-mini-fab\", \"\", \"color\", \"accent\", \"aria-label\", \"refresh\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", 3, \"debounceClick\"], [4, \"ngIf\"], [1, \"container-fluid\", 2, \"height\", \"500px\"], [\"type\", \"text\", \"name\", \"searchString\", 2, \"width\", \"80px\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [3, \"mat-sort-header\"], [3, \"ngClass\", \"click\"], [\"class\", \"dont-break-out\", 4, \"ngFor\", \"ngForOf\"], [1, \"dont-break-out\"], [\"mode\", \"determinate\", 3, \"value\"]],\n      template: function MusicSorterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\");\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"table\", 1);\n          i0.ɵɵlistener(\"matSortChange\", function MusicSorterComponent_Template_table_matSortChange_3_listener($event) {\n            return ctx.sortData($event);\n          });\n          i0.ɵɵelementStart(4, \"thead\", 2)(5, \"tr\");\n          i0.ɵɵtemplate(6, MusicSorterComponent_th_6_Template, 2, 2, \"th\", 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"thead\", 2)(8, \"tr\");\n          i0.ɵɵtemplate(9, MusicSorterComponent_th_9_Template, 3, 2, \"th\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"tbody\");\n          i0.ɵɵtemplate(11, MusicSorterComponent_tr_11_Template, 2, 2, \"tr\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(12, \"span\", 6);\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 7)(15, \"mat-form-field\", 8)(16, \"mat-label\");\n          i0.ɵɵtext(17, \"File Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicSorterComponent_Template_input_ngModelChange_18_listener($event) {\n            return ctx.fileContains = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"button\", 10);\n          i0.ɵɵlistener(\"debounceClick\", function MusicSorterComponent_Template_button_debounceClick_19_listener() {\n            return ctx.openFolder();\n          });\n          i0.ɵɵelementStart(20, \"mat-icon\");\n          i0.ɵɵtext(21, \"folder_open\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"div\", 11)(23, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function MusicSorterComponent_Template_button_click_23_listener() {\n            return ctx.clearSearch();\n          });\n          i0.ɵɵelementStart(24, \"mat-icon\");\n          i0.ɵɵtext(25, \"clear_all\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(26, \"button\", 13);\n          i0.ɵɵlistener(\"debounceClick\", function MusicSorterComponent_Template_button_debounceClick_26_listener() {\n            return ctx.copyDir();\n          });\n          i0.ɵɵtext(27, \" Copy Files \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\");\n          i0.ɵɵtext(29);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(30, MusicSorterComponent_div_30_Template, 3, 1, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(31, \"div\", 15);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.folder, \" \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.searchStringsArray);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.searchStringsArray);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredMusic);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" Last action: \", ctx.currentFeedback, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.fileContains);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate1(\"To: \", ctx.newDir, \"\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i6.MatIcon, i7.MatButton, i7.MatMiniFabButton, i7.MatFabButton, i8.MatProgressBar, i9.MatSort, i9.MatSortHeader, i10.MatInput, i11.MatFormField, i11.MatLabel, i12.AntiSpamClickDirective]\n    });\n  }\n  return MusicSorterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}