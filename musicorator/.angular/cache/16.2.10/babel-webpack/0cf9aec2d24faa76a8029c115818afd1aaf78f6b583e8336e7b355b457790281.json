{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../electron-communicator.service\";\nimport * as i2 from \"../helper.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/chips\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"@angular/material/progress-bar\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"../anti-spam-click.directive\";\nimport * as i13 from \"../tag-stepper/tag-stepper.component\";\nfunction TaggingFromFileComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-tag-stepper\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matrix\", ctx_r0.suggestionsAsMatrix)(\"resultsArray\", ctx_r0.resultsArray)(\"songSuggestions\", ctx_r0.songSuggestions)(\"isAutoSort\", ctx_r0.isAutoSort)(\"selectedGroups\", ctx_r0.selectedGroups);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0,\n    \"min-height\": \"25px\",\n    \"font-size\": \"small\"\n  };\n};\nfunction TaggingFromFileComponent_mat_chip_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 23);\n    i0.ɵɵlistener(\"click\", function TaggingFromFileComponent_mat_chip_14_Template_mat_chip_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const tag_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove(tag_r4));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tag_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r1.getColor(tag_r4)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r4, \" \");\n  }\n}\nfunction TaggingFromFileComponent_div_34_mat_chip_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tag_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r8.getColor(tag_r9)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r9, \" \");\n  }\n}\nfunction TaggingFromFileComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25);\n    i0.ɵɵlistener(\"debounceClick\", function TaggingFromFileComponent_div_34_Template_div_debounceClick_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const file_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.setCurrentFile(file_r7));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 26)(4, \"mat-chip-list\");\n    i0.ɵɵtemplate(5, TaggingFromFileComponent_div_34_mat_chip_5_Template, 2, 4, \"mat-chip\", 27);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 28)(7, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function TaggingFromFileComponent_div_34_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const file_r7 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.playSong(file_r7));\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"play_arrow\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const file_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.currentFile === file_r7 ? \"row selected\" : \"row\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"debounceTime\", 1000);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.getFileName(file_r7), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getFileData(file_r7));\n  }\n}\nfunction TaggingFromFileComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Loading... \");\n    i0.ɵɵelement(2, \"mat-progress-bar\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r3.progress);\n  }\n}\nexport var KEY_CODE = /*#__PURE__*/function (KEY_CODE) {\n  KEY_CODE[\"RIGHT_ARROW\"] = \"ArrowRight\";\n  KEY_CODE[\"LEFT_ARROW\"] = \"ArrowLeft\";\n  KEY_CODE[\"ENTER\"] = \"Enter\";\n  return KEY_CODE;\n}(KEY_CODE || {});\n// import { COMMA, SPACE } from '@angular/cdk/keycodes';\nexport let TaggingFromFileComponent = /*#__PURE__*/(() => {\n  class TaggingFromFileComponent {\n    keyEvent(event) {\n      if (event.key === KEY_CODE.RIGHT_ARROW) {\n        this.loadNextTrack();\n      }\n      if (event.key === KEY_CODE.LEFT_ARROW) {\n        this.loadPreviousTrack();\n      }\n      if (event.key === KEY_CODE.ENTER) {\n        if (this.isSaveOnEnter) {\n          this.saveSongData();\n        }\n      }\n    }\n    getFileData(file) {\n      const name = this.getFileName(file);\n      if (this.filesAndTags) {\n        if (this.filesAndTags[name]) {\n          return this.filesAndTags[name];\n        }\n      }\n      return [];\n    }\n    saveSongData() {\n      const tags = this.getTagsFormatted();\n      this.filesAndTags[this.getFileName(this.currentFile)] = this.resultsArray.slice();\n      const options = {\n        key: 'setMusicData',\n        dir: this.currentFile,\n        tagsObject: tags\n      };\n      if (this.currentFile && tags) {\n        this.setProgressAndFeedback(true, 'Saving Audio Data...', true);\n        this.communicator.sendToElectron(options);\n      } else {\n        this.feedback('Not saving empty.', true);\n      }\n    }\n    getTagsFormatted() {\n      if (this.resultsArray) {\n        if (this.resultsArray.length) {\n          const trimedArr = this.resultsArray.map(str => str.trim().toLowerCase());\n          const tagString = trimedArr.join(',');\n          const updatedComment = {\n            language: 'eng',\n            shortText: '',\n            text: tagString\n          };\n          // library requires top object // I didn't realize and ruined some files :D\n          // update just edits tags added, write overwrites and deletes the rest\n          const tags = {\n            COMM: updatedComment,\n            comment: updatedComment\n          };\n          return tags;\n        }\n      }\n      return '';\n    }\n    addCustom(event) {\n      const input = event.input;\n      const value = event.value;\n      this.tryAddValidated(value, this.custom);\n      if (input) {\n        input.value = '';\n      }\n    }\n    constructor(communicator, helper) {\n      this.communicator = communicator;\n      this.helper = helper;\n      this.isPlayAndData = true;\n      this.currentFolder = 'C:/Users';\n      this.fileContains = '.mp3';\n      this.folders = [];\n      // allow next song\n      this.currentFilePositionInArray = 0;\n      this.isAutoplay = true;\n      this.resultsArray = [];\n      this.isAutoSort = true;\n      this.isSaveOnEnter = true;\n      this.songSuggestions = [];\n      this.custom = [];\n      this.filesAndTags = {};\n      this.selectedGroups = [];\n      this.suggestionKeys = ['album', 'artist', 'bpm', 'composer', 'initialKey', 'title'];\n    }\n    ngOnInit() {\n      this.loadSettings();\n      this.setProgressAndFeedback(false, '', false);\n      this.subscriptions = [];\n      this.subscriptions.push(this.setLoadFolderListener());\n      this.subscriptions.push(this.setGetFilesByTypeListener());\n      this.subscriptions.push(this.setPlaySongListener());\n      this.subscriptions.push(this.setGetSongListener());\n      this.subscriptions.push(this.setGetSettingsListener());\n      this.subscriptions.push(this.setSaveSongListener());\n    }\n    setSaveSongListener() {\n      return this.communicator.listenToElectronConstantly('setMusicData').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Saved Audio.', true);\n      });\n    }\n    loadSettings() {\n      const options = {\n        key: 'getSettings'\n      };\n      this.setProgressAndFeedback(true, 'Getting Settings...', false);\n      this.communicator.sendToElectron(options);\n    }\n    ngOnDestroy() {\n      for (const subscription of this.subscriptions) {\n        if (subscription) {\n          try {\n            subscription.unsubscribe();\n          } catch (error) {}\n        }\n      }\n    }\n    getSuggestionsAsArray() {\n      const keys = Object.keys(this.suggestionsFromFile);\n      const arr = new Array(keys.length);\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      return arr;\n    }\n    getSuggestionsAsMatrix() {\n      const keys = Object.keys(this.suggestionsFromFile);\n      const arr = new Array(keys.length);\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      let currentGroup = arr[0].group;\n      const matrix = [];\n      let currentRow = [];\n      for (const suggestionObj of arr) {\n        const group = suggestionObj.group;\n        if (currentGroup !== group) {\n          matrix.push({\n            title: currentGroup,\n            value: currentRow\n          });\n          currentGroup = group;\n          currentRow = [];\n        }\n        currentRow.push(suggestionObj);\n      }\n      // last push\n      matrix.push({\n        title: currentGroup,\n        value: currentRow\n      });\n      return matrix;\n    }\n    setSongDetails(result) {\n      if (result) {\n        this.setSuggestionsFromTrack(result);\n        this.setTagsArray(result);\n        this.filesAndTags[this.getFileName(this.currentFile)] = this.resultsArray.slice();\n      } else {\n        this.feedback('No Audio Metadata.', false);\n      }\n    }\n    setSuggestionsFromTrack(result) {\n      const arr = this.helper.getValuesFromKeys(result, this.suggestionKeys);\n      const uniques = this.helper.getOnlyUnique(arr);\n      const trimmed = this.helper.getTrimmedArray(uniques);\n      const lowered = this.helper.getLowerCaseArray(trimmed);\n      this.songSuggestions = lowered;\n    }\n    setTagsArray(result) {\n      let tags = [];\n      if (result.comment) {\n        let tagsResult = '';\n        const comment = result.comment;\n        if (comment.text) {\n          tagsResult = comment.text;\n          tags = this.getCommentAsArray(tagsResult);\n        }\n      }\n      this.resultsArray = tags;\n      this.selectedGroups = [];\n    }\n    getColor(tag) {\n      if (this.suggestionsFromFile) {\n        if (this.suggestionsFromFile[tag]) {\n          return this.suggestionsFromFile[tag].color;\n        }\n      }\n      return 'grey';\n    }\n    getCommentAsArray(comment) {\n      if (comment) {\n        const c = comment.toString();\n        let arr = c.split(',');\n        if (arr) {\n          arr = this.helper.getLowerCaseArray(arr);\n          return this.helper.getTrimmedArray(arr);\n        }\n      }\n      return [''];\n    }\n    remove(tag) {\n      const index = this.resultsArray.indexOf(tag);\n      if (index >= 0) {\n        this.resultsArray.splice(index, 1);\n      }\n    }\n    removeCustom(tag) {\n      const index = this.custom.indexOf(tag);\n      if (index >= 0) {\n        this.custom.splice(index, 1);\n      }\n    }\n    tryAddValidated(value, arr) {\n      const unique = this.isNotIn(value, arr);\n      if (unique) {\n        if ((value || '').trim()) {\n          arr.push(value.trim().toLowerCase());\n        }\n      } else {\n        this.feedback('Already added.', true);\n      }\n      if (this.isAutoSort) {\n        this.sortArrayByLength(this.resultsArray);\n      }\n    }\n    sortArrayByLength(arr) {\n      arr.sort((a, b) => {\n        // ASC  -> a.length - b.length\n        // DESC -> b.length - a.length\n        return a.length - b.length;\n      });\n    }\n    // only add if unique\n    isNotIn(val, arr) {\n      return !(arr.indexOf(val) > -1);\n    }\n    isThisTagSelected(tag) {\n      return !this.isNotIn(tag, this.resultsArray);\n    }\n    setGetSettingsListener() {\n      return this.communicator.listenToElectronConstantly('getSettings').subscribe(result => {\n        if (result) {\n          this.suggestionsFromFile = result.tags;\n          this.suggestionsAsArray = this.getSuggestionsAsArray();\n          this.suggestionsAsMatrix = this.getSuggestionsAsMatrix();\n          this.setProgressAndFeedback(false, 'Got Settings.', false);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Settings Failed.', false);\n        }\n      });\n    }\n    loadPreviousTrack() {\n      this.setNextOrPreviousTrack(-1);\n    }\n    loadNextTrack() {\n      this.setNextOrPreviousTrack(1);\n    }\n    setNextOrPreviousTrack(next) {\n      this.setValidatedPosition(next);\n      const file = this.folders[this.currentFilePositionInArray];\n      this.setCurrentFile(file);\n    }\n    setValidatedPosition(next) {\n      this.currentFilePositionInArray += next;\n      if (this.currentFilePositionInArray < 0) {\n        this.currentFilePositionInArray = this.folders.length - 1;\n      }\n      if (this.currentFilePositionInArray > this.folders.length - 1) {\n        this.currentFilePositionInArray = 0;\n      }\n    }\n    setCurrentFile(file) {\n      this.currentFile = file;\n      const i = this.folders.indexOf(this.currentFile);\n      if (i > -1) {\n        this.currentFilePositionInArray = i;\n      }\n      this.getSongData();\n      if (this.isAutoplay) {\n        this.playSong(file);\n      }\n    }\n    playSong(file) {\n      this.currentFile = file;\n      const options = {\n        key: 'playAudio',\n        dir: file\n      };\n      this.setProgressAndFeedback(true, 'Playing Audio...', false);\n      this.communicator.sendToElectron(options);\n      if (this.isPlayAndData) {\n        this.getSongData();\n      }\n    }\n    openFolder() {\n      const options = {\n        key: 'openDirectory'\n      };\n      this.setProgressAndFeedback(true, 'Opening Directory...', true);\n      this.communicator.sendToElectron(options);\n    }\n    getFilesByType() {\n      const options = {\n        key: 'getFilesByType',\n        dir: this.currentFolder,\n        type: this.fileContains\n      };\n      this.setProgressAndFeedback(true, 'Getting Files...', true);\n      this.communicator.sendToElectron(options);\n    }\n    getSongData() {\n      const options = {\n        key: 'getMusicData',\n        dir: this.currentFile\n      };\n      this.setProgressAndFeedback(true, 'Getting Audio Data...', false);\n      this.communicator.sendToElectron(options);\n    }\n    setLoadFolderListener() {\n      return this.communicator.listenToElectronConstantly('openDirectory').subscribe(result => {\n        if (result) {\n          this.currentFolder = result;\n          this.setProgressAndFeedback(false, 'Opened Directory.', true);\n          setTimeout(() => {\n            this.filesAndTags = {};\n            this.getFilesByType();\n          }, 500);\n        } else {\n          this.setProgressAndFeedback(false, 'Open Folder Failed.', false);\n        }\n      });\n    }\n    setGetFilesByTypeListener() {\n      return this.communicator.listenToElectronConstantly('getFilesByType').subscribe(result => {\n        if (result) {\n          this.folders = result;\n          this.setProgressAndFeedback(false, 'Received Files.', true);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Files Failed.', false);\n        }\n      });\n    }\n    setPlaySongListener() {\n      return this.communicator.listenToElectronConstantly('playAudio').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Played Audio.', false);\n      });\n    }\n    setGetSongListener() {\n      return this.communicator.listenToElectronConstantly('getMusicData').subscribe(result => {\n        if (result) {\n          this.currentMetaDataObject = result;\n          this.setProgressAndFeedback(false, 'Received Audio Data.', false);\n          this.setSongDetails(result);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Data Failed.', false);\n        }\n      });\n    }\n    getFileName(name) {\n      return this.communicator.getFileName(name);\n    }\n    setProgressAndFeedback(b, s, isImportant) {\n      this.isLoading = b;\n      if (!b) {\n        this.progress = 100;\n      }\n      if (b) {\n        this.progress = 0;\n        this.feedbackCounter = 0;\n      }\n      if (s) {\n        this.feedback(s, isImportant);\n      }\n    }\n    getFeedBack() {\n      return this.currentFeedback;\n    }\n    feedback(s, isImportant) {\n      if (isImportant) {\n        this.helper.feedback(JSON.stringify(s));\n      }\n      this.currentFeedback = JSON.stringify(s);\n    }\n    static #_ = this.ɵfac = function TaggingFromFileComponent_Factory(t) {\n      return new (t || TaggingFromFileComponent)(i0.ɵɵdirectiveInject(i1.ElectronCommunicatorService), i0.ɵɵdirectiveInject(i2.HelperService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaggingFromFileComponent,\n      selectors: [[\"app-tagging-from-file\"]],\n      hostBindings: function TaggingFromFileComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keyup\", function TaggingFromFileComponent_keyup_HostBindingHandler($event) {\n            return ctx.keyEvent($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      inputs: {\n        fileContains: \"fileContains\"\n      },\n      decls: 47,\n      vars: 11,\n      consts: [[1, \"container-fluid\"], [1, \"menu\"], [1, \"row\"], [1, \"row\", 2, \"padding-left\", \"10px\"], [1, \"text-center\"], [4, \"ngIf\"], [1, \"row\", \"tight-row\"], [1, \"col-2\", 2, \"font-weight\", \"bold\"], [1, \"col-10\"], [\"style\", \"color: white\", 3, \"ngStyle\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"checkbox\"], [3, \"ngModel\", \"ngModelChange\"], [2, \"margin-left\", \"15px\"], [\"mat-mini-fab\", \"\", \"color\", \"white\", \"aria-label\", \"Play\", 1, \"mini-button\", 3, \"click\"], [2, \"margin-left\", \"5px\"], [\"class\", \"row\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"container-fluid\", 2, \"height\", \"500px\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [2, \"width\", \"100px\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-fab\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [3, \"matrix\", \"resultsArray\", \"songSuggestions\", \"isAutoSort\", \"selectedGroups\"], [2, \"color\", \"white\", 3, \"ngStyle\", \"click\"], [1, \"row\", 3, \"ngClass\"], [\"appAntiSpamClick\", \"\", 1, \"col-4\", \"button-align\", \"clickable-text\", 3, \"debounceTime\", \"debounceClick\"], [1, \"col-7\", \"button-align\"], [\"style\", \"color: white\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-1\"], [2, \"color\", \"white\", 3, \"ngStyle\"], [\"mode\", \"determinate\", 3, \"value\"]],\n      template: function TaggingFromFileComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 0)(3, \"div\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4);\n          i0.ɵɵtemplate(7, TaggingFromFileComponent_div_7_Template, 2, 5, \"div\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(8, \"hr\");\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7);\n          i0.ɵɵtext(11, \"current\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 8)(13, \"mat-chip-list\");\n          i0.ɵɵtemplate(14, TaggingFromFileComponent_mat_chip_14_Template, 2, 4, \"mat-chip\", 9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(15, \"div\", 2)(16, \"div\", 10)(17, \"mat-checkbox\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function TaggingFromFileComponent_Template_mat_checkbox_ngModelChange_17_listener($event) {\n            return ctx.isAutoplay = $event;\n          });\n          i0.ɵɵtext(18, \"Auto Play\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 10)(20, \"mat-checkbox\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function TaggingFromFileComponent_Template_mat_checkbox_ngModelChange_20_listener($event) {\n            return ctx.isAutoSort = $event;\n          });\n          i0.ɵɵtext(21, \"Auto Sort\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"div\", 10)(23, \"mat-checkbox\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function TaggingFromFileComponent_Template_mat_checkbox_ngModelChange_23_listener($event) {\n            return ctx.isSaveOnEnter = $event;\n          });\n          i0.ɵɵtext(24, \"Save On Enter\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 12)(26, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function TaggingFromFileComponent_Template_button_click_26_listener() {\n            return ctx.playSong(ctx.currentFile);\n          });\n          i0.ɵɵelementStart(27, \"mat-icon\");\n          i0.ɵɵtext(28, \"play_arrow\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"div\", 14)(30, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function TaggingFromFileComponent_Template_button_click_30_listener() {\n            return ctx.saveSongData();\n          });\n          i0.ɵɵelementStart(31, \"mat-icon\");\n          i0.ɵɵtext(32, \"save\");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(33, \"div\", 0);\n          i0.ɵɵtemplate(34, TaggingFromFileComponent_div_34_Template, 10, 4, \"div\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(35, \"div\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"span\", 17);\n          i0.ɵɵtext(37);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"div\", 18)(39, \"mat-form-field\", 19)(40, \"mat-label\");\n          i0.ɵɵtext(41, \"File Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(42, \"input\", 20);\n          i0.ɵɵlistener(\"ngModelChange\", function TaggingFromFileComponent_Template_input_ngModelChange_42_listener($event) {\n            return ctx.fileContains = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(43, \"button\", 21);\n          i0.ɵɵlistener(\"debounceClick\", function TaggingFromFileComponent_Template_button_debounceClick_43_listener() {\n            return ctx.openFolder();\n          });\n          i0.ɵɵelementStart(44, \"mat-icon\");\n          i0.ɵɵtext(45, \"folder_open\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(46, TaggingFromFileComponent_div_46_Template, 3, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.currentFile);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.suggestionsAsMatrix);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.resultsArray);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.isAutoplay);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.isAutoSort);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.isSaveOnEnter);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngForOf\", ctx.folders);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" Last action: \", ctx.currentFeedback, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.fileContains);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.NgStyle, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.MatChip, i6.MatIcon, i7.MatMiniFabButton, i7.MatFabButton, i8.MatCheckbox, i9.MatProgressBar, i10.MatInput, i11.MatFormField, i11.MatLabel, i12.AntiSpamClickDirective, i13.TagStepperComponent]\n    });\n  }\n  return TaggingFromFileComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}