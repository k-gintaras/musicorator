{"ast":null,"code":"import { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/cdk/drag-drop\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/checkbox\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/tabs\";\nconst _c0 = function () {\n  return {\n    \"background-color\": \"grey\"\n  };\n};\nfunction JsonArrangerComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(2, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r10, \" \");\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction JsonArrangerComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r12 = ctx.$implicit;\n    const i_r13 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r3.bigMatrix.colors[i_r13]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r12.group, \" \");\n  }\n}\nfunction JsonArrangerComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r5.bigMatrix.colors[i_r15]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r14.name, \" \");\n  }\n}\nfunction JsonArrangerComponent_div_63_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, item_r16.color));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r16.name, \" \");\n  }\n}\nfunction JsonArrangerComponent_div_87_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r17 = ctx.$implicit;\n    const i_r18 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r9.bigMatrix.colors[i_r18]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r17, \" \");\n  }\n}\nconst _c2 = function (a0) {\n  return [a0];\n};\nexport let JsonArrangerComponent = /*#__PURE__*/(() => {\n  class JsonArrangerComponent {\n    constructor() {\n      this.updatedJson = new EventEmitter();\n      this.groups = [];\n      this.bigMatrix = {\n        names: [],\n        colors: [],\n        groups: []\n      };\n      this.suggestionsBin = [];\n      this.groupsBin = ['placeholder'];\n      // feedback\n      this.currentFeedback = '';\n      this.currentName = '';\n      this.currentGroupName = '';\n      this.currentColorArrayString = '';\n      this.isAutoSort = true;\n      this.defaultColors = '#6e40aa, #7d3faf, #8e3eb2, #9e3db3, #af3cb2, #bf3caf, #cf3da9, #dd3fa2, #ea4299, #f5468e, #fe4b83, #ff5276, #ff5a6a, #ff635d, #ff6d51, #ff7847, #ff833d, #ff9036, #f69d31, #edaa2e, #e2b72f, #d7c432, #ccd038, #c1dc41, #b7e64c, #aff05b, #9cf357, #88f557, #75f65a, #63f75f, #52f667, #43f471, #36f17c, #2bec89, #23e696, #1ddfa3, #1ad6b0, #19cdbc, #1bc2c7, #1eb7d1, #23abd8, #2a9fde, #3292e1, #3a86e1, #437ae0, #4c6edb, #5563d5, #5d59cd, #6450c3, #6947b7';\n    }\n    ngOnInit() {\n      this.setSettingsObjects();\n    }\n    save() {}\n    ngOnChanges(changes) {\n      if (changes.jsonMapArray) {\n        if (changes.jsonMapArray.currentValue !== changes.jsonMapArray.previousValue) {\n          this.setSettingsObjects();\n        }\n      }\n    }\n    feedback(msg, important) {\n      this.currentFeedback = msg;\n    }\n    getSettingsRemapped() {\n      const settingsObject = {};\n      const cols = this.bigMatrix.colors;\n      for (let j = 0; j < this.suggestionsAsArray.length; j++) {\n        const suggestion = this.suggestionsAsArray[j];\n        let c = 'grey';\n        if (j < cols.length) {\n          c = cols[j];\n        }\n        const remapped = {\n          color: c,\n          group: suggestion.group,\n          i: j\n        };\n        settingsObject[suggestion.name] = remapped;\n      }\n      return settingsObject;\n    }\n    addTag() {\n      if (this.currentName && this.currentName) {\n        const o = {\n          name: this.currentName,\n          group: this.currentGroupName,\n          color: 'grey'\n        };\n        const unique = this.isUniqueObject(o, 'name', this.suggestionsAsArray);\n        if (unique) {\n          this.suggestionsAsArray.push(o);\n          this.feedback('Added To The Bottom', true);\n          this.onSuggestionUpdated();\n        } else {\n          this.feedback('Already Added', true);\n        }\n        this.addUniqueItem(this.groups, this.currentGroupName);\n      } else {\n        this.feedback('Will not add empty.', true);\n      }\n    }\n    onSuggestionUpdated() {\n      if (this.isAutoSort) {\n        this.suggestionsAsArray = this.groupByArrayKey(this.suggestionsAsArray, 'group');\n      }\n      this.updatedJson.emit(this.getSettingsRemapped());\n    }\n    setNewColors() {\n      this.bigMatrix.colors = this.currentColorArrayString.split(',');\n      this.onSuggestionUpdated();\n    }\n    setDefaultColors() {\n      this.bigMatrix.colors = this.defaultColors.split(',');\n      this.onSuggestionUpdated();\n    }\n    addUniqueItem(arr, item) {\n      if (arr.indexOf(item) === -1) {\n        arr.push(item);\n      }\n    }\n    setSettingsObjects() {\n      if (this.jsonMapArray) {\n        this.suggestionsAsArray = this.getSuggestionsAsArray();\n        this.suggestionsAsMatrix = this.getSuggestionsAsMatrix();\n        this.bigMatrix = this.getSuggestionsAsBigMatrix();\n        this.groups = this.getGroups();\n        this.currentColorArrayString = this.bigMatrix.colors.join(',');\n      }\n    }\n    getSuggestionsAsArray() {\n      const keys = Object.keys(this.jsonMapArray);\n      const arr = new Array(keys.length);\n      Object.keys(this.jsonMapArray).forEach(key => {\n        const val = this.jsonMapArray[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      return arr;\n    }\n    getGroups() {\n      const arr = [];\n      Object.keys(this.jsonMapArray).forEach(key => {\n        const val = this.jsonMapArray[key];\n        this.addUniqueItem(arr, val.group);\n      });\n      return arr;\n    }\n    getSuggestionsAsBigMatrix() {\n      const arr = {\n        names: [],\n        colors: [],\n        groups: []\n      };\n      const names = [];\n      const colors = [];\n      const groups = [];\n      Object.keys(this.jsonMapArray).forEach(key => {\n        const val = this.jsonMapArray[key];\n        names.push(key);\n        colors.push(val.color);\n        groups.push(val.group);\n      });\n      arr.names = names;\n      arr.colors = colors;\n      arr.groups = groups;\n      return arr;\n    }\n    getSuggestionsAsMatrix() {\n      const keys = Object.keys(this.jsonMapArray);\n      const arr = new Array(keys.length);\n      Object.keys(this.jsonMapArray).forEach(key => {\n        const val = this.jsonMapArray[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      let currentGroup = arr[0].group;\n      const matrix = [];\n      let currentRow = [];\n      for (const suggestionObj of arr) {\n        const group = suggestionObj.group;\n        if (currentGroup !== group) {\n          matrix.push({\n            title: currentGroup,\n            value: currentRow\n          });\n          currentGroup = group;\n          currentRow = [];\n        }\n        currentRow.push(suggestionObj);\n      }\n      // last push\n      matrix.push({\n        title: currentGroup,\n        value: currentRow\n      });\n      return matrix;\n    }\n    groupGroups() {\n      this.suggestionsAsArray = this.groupByArrayKey(this.suggestionsAsArray, 'group');\n      this.onSuggestionUpdated();\n    }\n    groupByArray(list, keyGetter) {\n      const map = new Map();\n      list.forEach(item => {\n        const key = keyGetter(item);\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      const valueMatrix = map.values();\n      const arr = [];\n      for (const valueArray of valueMatrix) {\n        arr.concat(valueArray);\n      }\n      return arr;\n    }\n    groupByArrayKey(list, keyToSearch) {\n      const map = new Map();\n      list.forEach(item => {\n        const key = item[keyToSearch];\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      const valueMatrix = map.values();\n      let arr = [];\n      for (const valueArray of valueMatrix) {\n        arr = arr.concat(valueArray);\n      }\n      return arr;\n    }\n    drop(event) {\n      const isUnique = this.isUniqueObject(event.previousContainer.data[event.previousIndex], 'name', event.container.data);\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        this.onSuggestionUpdated();\n      } else {\n        if (isUnique) {\n          transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n          this.onSuggestionUpdated();\n        } else {\n          this.feedback('Already Added', true);\n        }\n      }\n    }\n    // TODO: useful\n    isUniqueObject(itemObjectToAdd, keyToSearch, arrayOfObjects) {\n      for (const o of arrayOfObjects) {\n        const name = o[keyToSearch];\n        if (name === itemObjectToAdd[keyToSearch]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    dropGroup(event) {\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        this.moveGroup(event.container.data[event.currentIndex], event.currentIndex);\n        this.onSuggestionUpdated();\n      }\n    }\n    moveGroup(group, i) {\n      this.suggestionsAsArray = this.getMovedGroup(this.suggestionsAsArray, 'group', group, i);\n    }\n    // TODO: useful for managing jsons\n    getMovedGroup(arr, groupKey, groupValue, i) {\n      if (i === 0) {\n        // just move to top\n        return this.moveArrayObjectGroup(arr, groupKey, groupValue, 0);\n      }\n      if (i === this.groups.length - 1) {\n        // just move to bottom\n        return this.moveArrayObjectGroup(arr, groupKey, groupValue, arr.length - 1);\n      }\n      if (i > 0 && i < this.groups.length - 1) {\n        const previous = this.groups[i + 1];\n        for (let j = 0; j < arr.length; j++) {\n          const cur = arr[j];\n          if (cur.group === previous) {\n            return this.moveArrayObjectGroup(arr, groupKey, groupValue, j);\n          }\n        }\n      }\n      return arr;\n    }\n    moveArrayObjectGroup(arrayToProcess, keyToProcess, keyValueToFind, i) {\n      const filteredWithout = arrayToProcess.filter(row => {\n        return row[keyToProcess] !== keyValueToFind;\n      });\n      const filteredWith = arrayToProcess.filter(row => {\n        return row[keyToProcess] === keyValueToFind;\n      });\n      filteredWithout.splice(i, 0, ...filteredWith);\n      return filteredWithout;\n    }\n    static #_ = this.ɵfac = function JsonArrangerComponent_Factory(t) {\n      return new (t || JsonArrangerComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: JsonArrangerComponent,\n      selectors: [[\"app-json-arranger\"]],\n      inputs: {\n        jsonMapArray: \"jsonMapArray\"\n      },\n      outputs: {\n        updatedJson: \"updatedJson\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 88,\n      vars: 28,\n      consts: [[1, \"container-fluid\"], [1, \"row\"], [\"label\", \"Manage Groups\"], [2, \"padding\", \"25px\"], [\"cdkDropList\", \"\", 1, \"drag-container\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"suggestionsList\", \"cdkDropList\"], [\"class\", \"drag-box\", \"cdkDrag\", \"\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"label\", \"Manage Suggestions\"], [1, \"checkbox\"], [3, \"ngModel\", \"ngModelChange\"], [2, \"margin\", \"25px\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"primary\", \"mat-mini-fab\", \"\", 3, \"click\"], [1, \"col-3\"], [\"cdkDropList\", \"\", 1, \"drag-container\", 3, \"cdkDropListConnectedTo\", \"cdkDropListData\", \"cdkDropListDropped\"], [\"suggestionsList2\", \"cdkDropList\"], [2, \"visibility\", \"hidden\", \"height\", \"20px\"], [\"suggestionsList1\", \"cdkDropList\"], [\"binList\", \"cdkDropList\"], [\"label\", \"Manage Colors\"], [2, \"margin\", \"10px\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"cdkDropList\", \"\", 1, \"example-list\", 3, \"cdkDropListData\", \"cdkDropListDropped\"], [\"cdkDrag\", \"\", 1, \"drag-box\", 3, \"ngStyle\"]],\n      template: function JsonArrangerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"mat-tab-group\", 0)(5, \"mat-tab\", 2)(6, \"div\", 3)(7, \"div\", 1)(8, \"h2\");\n          i0.ɵɵtext(9, \"Groups\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 1)(11, \"div\", 4, 5);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function JsonArrangerComponent_Template_div_cdkDropListDropped_11_listener($event) {\n            return ctx.dropGroup($event);\n          });\n          i0.ɵɵtemplate(13, JsonArrangerComponent_div_13_Template, 2, 3, \"div\", 6);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(14, \"mat-tab\", 7)(15, \"div\", 3)(16, \"div\", 1)(17, \"h2\");\n          i0.ɵɵtext(18, \"Suggestions\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 1);\n          i0.ɵɵtext(20, \" If you don't group groups, they might behave unexpectedly. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 1)(22, \"div\", 8)(23, \"mat-checkbox\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function JsonArrangerComponent_Template_mat_checkbox_ngModelChange_23_listener($event) {\n            return ctx.isAutoSort = $event;\n          });\n          i0.ɵɵtext(24, \"Auto Group\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(25, \"div\", 1)(26, \"div\", 10)(27, \"mat-form-field\")(28, \"mat-label\");\n          i0.ɵɵtext(29, \"Group\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function JsonArrangerComponent_Template_input_ngModelChange_30_listener($event) {\n            return ctx.currentGroupName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(31, \"mat-form-field\")(32, \"mat-label\");\n          i0.ɵɵtext(33, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function JsonArrangerComponent_Template_input_ngModelChange_34_listener($event) {\n            return ctx.currentName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(35, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function JsonArrangerComponent_Template_button_click_35_listener() {\n            return ctx.addTag();\n          });\n          i0.ɵɵelementStart(36, \"mat-icon\");\n          i0.ɵɵtext(37, \"add\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(38, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function JsonArrangerComponent_Template_button_click_38_listener() {\n            return ctx.groupGroups();\n          });\n          i0.ɵɵelementStart(39, \"mat-icon\");\n          i0.ɵɵtext(40, \"sort\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(41, \"div\", 1)(42, \"div\", 13)(43, \"h2\");\n          i0.ɵɵtext(44, \"Groups\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(45, \"div\", 14, 15);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function JsonArrangerComponent_Template_div_cdkDropListDropped_45_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(47, JsonArrangerComponent_div_47_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(48, \"div\", 16);\n          i0.ɵɵtext(49, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(50, \"div\", 13)(51, \"h2\");\n          i0.ɵɵtext(52, \"Names\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\", 4, 17);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function JsonArrangerComponent_Template_div_cdkDropListDropped_53_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(55, JsonArrangerComponent_div_55_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(56, \"div\", 16);\n          i0.ɵɵtext(57, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(58, \"div\", 13)(59, \"h2\");\n          i0.ɵɵtext(60, \"Bin\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(61, \"div\", 14, 18);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function JsonArrangerComponent_Template_div_cdkDropListDropped_61_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(63, JsonArrangerComponent_div_63_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(64, \"div\", 16);\n          i0.ɵɵtext(65, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(66, \"mat-tab\", 19)(67, \"div\", 3)(68, \"div\", 1)(69, \"h2\");\n          i0.ɵɵtext(70, \"Suggestions\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(71, \"div\", 1)(72, \"div\", 20)(73, \"mat-form-field\")(74, \"mat-label\");\n          i0.ɵɵtext(75, \"Color Array String\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(76, \"input\", 11);\n          i0.ɵɵlistener(\"ngModelChange\", function JsonArrangerComponent_Template_input_ngModelChange_76_listener($event) {\n            return ctx.currentColorArrayString = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(77, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function JsonArrangerComponent_Template_button_click_77_listener() {\n            return ctx.setNewColors();\n          });\n          i0.ɵɵelementStart(78, \"mat-icon\");\n          i0.ɵɵtext(79, \"update\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(80, \"button\", 22);\n          i0.ɵɵlistener(\"click\", function JsonArrangerComponent_Template_button_click_80_listener() {\n            return ctx.setDefaultColors();\n          });\n          i0.ɵɵtext(81, \" Set Default Colors \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(82, \"div\", 13)(83, \"h2\");\n          i0.ɵɵtext(84, \"Colors\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(85, \"div\", 23, 5);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function JsonArrangerComponent_Template_div_cdkDropListDropped_85_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(87, JsonArrangerComponent_div_87_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          const _r4 = i0.ɵɵreference(54);\n          const _r6 = i0.ɵɵreference(62);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.currentFeedback);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"@.disabled\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.groups)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(20, _c2, _r6));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.groups);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.isAutoSort);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentGroupName);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentName);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(22, _c2, _r6))(\"cdkDropListData\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.suggestionsAsArray)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(24, _c2, _r6));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(26, _c2, _r4))(\"cdkDropListData\", ctx.suggestionsBin);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsBin);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentColorArrayString);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.bigMatrix.colors);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.bigMatrix.colors);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgStyle, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.CdkDropList, i3.CdkDrag, i4.MatIcon, i5.MatButton, i5.MatMiniFabButton, i6.MatCheckbox, i7.MatInput, i8.MatFormField, i8.MatLabel, i9.MatTab, i9.MatTabGroup]\n    });\n  }\n  return JsonArrangerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}