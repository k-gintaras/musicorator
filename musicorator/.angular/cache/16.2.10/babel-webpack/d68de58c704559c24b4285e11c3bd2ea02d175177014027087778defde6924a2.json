{"ast":null,"code":"import { ValidRequest } from '../ValidRequest';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../communicator-electron.service\";\nimport * as i2 from \"../data-processor.service\";\nimport * as i3 from \"@angular/material/icon\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"../progress/progress.component\";\nimport * as i6 from \"../json-arranger/json-arranger.component\";\nexport let SuggestionsComponent = /*#__PURE__*/(() => {\n  class SuggestionsComponent {\n    constructor(electronCommunicator, assistant) {\n      this.electronCommunicator = electronCommunicator;\n      this.assistant = assistant;\n      this.electronSubscriptions = [];\n      this.maxProgress = 0;\n    }\n    ngOnInit() {\n      this.electronSubscriptions = [];\n      this.electronSubscriptions.push(this.setElectronListener());\n      this.electronSubscriptions.push(this.setFeedbackListener());\n      this.assistant.loadSettings(this.getFeedback());\n    }\n    ngOnDestroy() {\n      this.assistant.setUnsubscribeTidyWithElectron(this.electronSubscriptions);\n    }\n    save() {\n      this.assistant.saveSettings(this.settingsJson, this.suggestionsJson);\n    }\n    onUpdatedJson(json) {\n      this.suggestionsJson = json;\n    }\n    getFeedback() {\n      return msg => {\n        this.feedback(msg);\n      };\n    }\n    feedback(msg) {\n      this.feedbackMessage = JSON.stringify(msg);\n    }\n    setFeedbackListener() {\n      return this.assistant.getFeedbackSubscription().subscribe(r => {\n        this.feedbackMessage = r;\n      });\n    }\n    /**\n     * responseFromMain\n     * {key: string, response: any}\n     */\n    setElectronListener() {\n      return this.electronCommunicator.listenToElectronResponsibly('responseFromMain').subscribe(result => {\n        if (result) {\n          this.handleResponse(result);\n          this.feedback('Got Response From Electron.');\n        } else {\n          this.feedback('Get Data From Electron Empty.');\n        }\n      });\n    }\n    handleResponse(result) {\n      const key = result.key;\n      const response = result.response;\n      if (key) {\n        switch (key) {\n          case ValidRequest.getSettings:\n            this.handleSettingsResponse(response);\n            break;\n          case ValidRequest.getFeedback:\n            this.assistant.setFeedback(true, response);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    handleSettingsResponse(response) {\n      if (response) {\n        if (response.tags) {\n          this.feedback('Got Settings.');\n          this.suggestionsJson = response.tags;\n          this.settingsJson = response;\n        }\n      }\n    }\n    static #_ = this.ɵfac = function SuggestionsComponent_Factory(t) {\n      return new (t || SuggestionsComponent)(i0.ɵɵdirectiveInject(i1.CommunicatorElectronService), i0.ɵɵdirectiveInject(i2.DataProcessorService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SuggestionsComponent,\n      selectors: [[\"app-suggestions\"]],\n      decls: 9,\n      vars: 4,\n      consts: [[1, \"jumbotron\"], [3, \"jsonMapArray\", \"updatedJson\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [\"mat-fab\", \"\", \"color\", \"primary\", \"aria-label\", \"button\", 3, \"click\"], [3, \"currentFeedback\", \"max\"]],\n      template: function SuggestionsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-json-arranger\", 1);\n          i0.ɵɵlistener(\"updatedJson\", function SuggestionsComponent_Template_app_json_arranger_updatedJson_1_listener($event) {\n            return ctx.onUpdatedJson($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(2, \"span\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function SuggestionsComponent_Template_button_click_5_listener() {\n            return ctx.save();\n          });\n          i0.ɵɵelementStart(6, \"mat-icon\");\n          i0.ɵɵtext(7, \"save\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(8, \"app-progress\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"jsonMapArray\", ctx.suggestionsJson);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.feedbackMessage, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"currentFeedback\", ctx.feedbackMessage)(\"max\", ctx.maxProgress);\n        }\n      },\n      dependencies: [i3.MatIcon, i4.MatFabButton, i5.ProgressComponent, i6.JsonArrangerComponent]\n    });\n  }\n  return SuggestionsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}