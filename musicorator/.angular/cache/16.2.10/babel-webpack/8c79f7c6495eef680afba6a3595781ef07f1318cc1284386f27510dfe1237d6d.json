{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let FileDataService = /*#__PURE__*/(() => {\n  class FileDataService {\n    constructor() {\n      this.suggestionSubject = new BehaviorSubject(null);\n      this.suggestionsMatrixSubject = new BehaviorSubject(null);\n      this.folderSubject = new BehaviorSubject(null);\n      this.fileSubject = new BehaviorSubject(null);\n      this.filesSubject = new BehaviorSubject(null);\n      this.filteredFilesSubject = new BehaviorSubject(null);\n      this.newFolderSubject = new BehaviorSubject(null);\n      this.filteredMatrixSubject = new BehaviorSubject(null);\n      this.audioDataSubject = new BehaviorSubject(null);\n      this.currentAudioDataMatrixSubject = new BehaviorSubject(null);\n      this.suggestionObservable = this.suggestionSubject.asObservable();\n      this.suggestionsMatrixObservable = this.suggestionsMatrixSubject.asObservable();\n      this.folderObservable = this.folderSubject.asObservable();\n      this.fileObservable = this.fileSubject.asObservable();\n      this.filesObservable = this.filesSubject.asObservable();\n      this.filteredFilesObservable = this.filteredFilesSubject.asObservable();\n      this.newFolderObservable = this.newFolderSubject.asObservable();\n      this.filteredMatrixObservable = this.filteredMatrixSubject.asObservable();\n      this.audioDataObservable = this.audioDataSubject.asObservable();\n      this.currentAudioDataMatrixObservable = this.currentAudioDataMatrixSubject.asObservable();\n    }\n    setSuggestionsObject(o) {\n      this.suggestionSubject.next(o);\n    }\n    setSuggestionsMatrix(o) {\n      this.suggestionsMatrixSubject.next(o);\n    }\n    setCurrentFolder(o) {\n      this.folderSubject.next(o);\n    }\n    setCurrentFile(o) {\n      this.fileSubject.next(o);\n    }\n    setCurrentFiles(o) {\n      this.filesSubject.next(o);\n    }\n    setFilteredMatrix(o) {\n      this.filteredMatrixSubject.next(o);\n    }\n    setFilteredFiles(o) {\n      this.filteredFilesSubject.next(o);\n    }\n    setNewFolder(o) {\n      this.newFolderSubject.next(o);\n    }\n    setCurrentAudioData(o) {\n      this.audioDataSubject.next(o);\n    }\n    setCurrentAudioDataMatrix(o) {\n      this.currentAudioDataMatrixSubject.next(o);\n    }\n    getSuggestionObservable() {\n      return this.suggestionObservable;\n    }\n    getSuggestionMatrixObservable() {\n      return this.suggestionsMatrixObservable;\n    }\n    getFolderObservable() {\n      return this.folderObservable;\n    }\n    getCurrentFileObservable() {\n      return this.fileObservable;\n    }\n    getFilesObservable() {\n      return this.filesObservable;\n    }\n    getFilteredFilesObservable() {\n      return this.filteredFilesObservable;\n    }\n    getNewFolderObservable() {\n      return this.newFolderObservable;\n    }\n    getFilteredMatrixObservable() {\n      return this.filteredMatrixObservable;\n    }\n    getAudioDataObservable() {\n      return this.audioDataObservable;\n    }\n    getAudioMatrixObservable() {\n      return this.currentAudioDataMatrixObservable;\n    }\n    static #_ = this.ɵfac = function FileDataService_Factory(t) {\n      return new (t || FileDataService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FileDataService,\n      factory: FileDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FileDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}