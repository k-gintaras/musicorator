{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../electron-communicator.service\";\nimport * as i2 from \"./suggestion.service\";\nimport * as i3 from \"../helper.service\";\nimport * as i4 from \"../popup/popup.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"../drag-edit-unique-chips/drag-edit-unique-chips.component\";\nimport * as i10 from \"../anti-spam-click.directive\";\nexport var KEY_CODE = /*#__PURE__*/function (KEY_CODE) {\n  KEY_CODE[\"ENTER\"] = \"Enter\";\n  return KEY_CODE;\n}(KEY_CODE || {});\nexport let MusicTaggingComponent = /*#__PURE__*/(() => {\n  class MusicTaggingComponent {\n    keyEvent(event) {\n      if (event.key === KEY_CODE.ENTER) {\n        if (this.isSaveOnEnter) {\n          this.saveSongData();\n        }\n      }\n    }\n    constructor(communicator, suggestionService, helper, dialog) {\n      this.communicator = communicator;\n      this.suggestionService = suggestionService;\n      this.helper = helper;\n      this.dialog = dialog;\n      this.suggestionKeys = ['album', 'artist', 'bpm', 'composer', 'initialKey', 'title'];\n      this.isSaveOnEnter = true;\n      this.isAddOnClick = false;\n    }\n    ngOnInit() {\n      // this.loadSettings();\n      this.subscriptions = [];\n      this.subscriptions.push(this.setPlaySongListener());\n      this.subscriptions.push(this.setSaveSongListener());\n      // this.subscriptions.push(this.setGetSettingsListener());\n      // this.subscriptions.push(this.setSuggestionsListener());\n      this.tagsSuggestion = this.suggestionService.getSuggestionTags();\n      this.setProgressAndFeedback(false, '', false);\n      this.setSongDetails(this.currentMetadataObject);\n    }\n    ngOnChanges() {\n      this.tagsSuggestion = this.suggestionService.getSuggestionTags();\n      this.setProgressAndFeedback(false, '', false);\n      this.setSongDetails(this.currentMetadataObject);\n    }\n    ngOnDestroy() {\n      for (const subscription of this.subscriptions) {\n        subscription.unsubscribe();\n      }\n    }\n    loadSettings() {\n      const options = {\n        key: 'getSettings'\n      };\n      this.setProgressAndFeedback(true, 'Getting Settings...', false);\n      this.communicator.sendToElectron(options);\n    }\n    playSong() {\n      const options = {\n        key: 'playAudio',\n        dir: this.currentFile\n      };\n      this.setProgressAndFeedback(true, 'Playing Audio...', false);\n      this.communicator.sendToElectron(options);\n    }\n    saveSongData() {\n      const tags = this.getTagsFormatted();\n      const options = {\n        key: 'setMusicData',\n        dir: this.currentFile,\n        tagsObject: tags\n      };\n      if (this.currentFile && tags) {\n        this.setProgressAndFeedback(true, 'Saving Audio Data...', true);\n        this.communicator.sendToElectron(options);\n      } else {\n        this.feedback('Not saving empty.', true);\n      }\n    }\n    setPlaySongListener() {\n      return this.communicator.listenToElectronConstantly('playAudio').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Played Audio.', false);\n      });\n    }\n    setGetSettingsListener() {\n      return this.communicator.listenToElectronConstantly('getSettings').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Got Settings.', false);\n      });\n    }\n    // setSuggestionsListener(): Subscription {\n    //   return this.chips.getSuggestionsObservable().subscribe((result) => {\n    //     this.tagsSuggestion = this.suggestionService.setSuggestionTags(result);\n    //   });\n    // }\n    setSaveSongListener() {\n      return this.communicator.listenToElectronConstantly('setMusicData').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Saved Audio.', true);\n      });\n    }\n    getFileName() {\n      return this.communicator.getFileName(this.currentFile);\n    }\n    showMore() {\n      if (this.currentMetadataObject) {\n        this.openDialog('Full Code', '', this.currentMetadataObject);\n      } else {\n        this.feedback('Could not get music data.', true);\n      }\n    }\n    openDialog(titleIn, message, codeIn) {\n      const dialogMessage = {\n        title: 'Music Data',\n        list: [{\n          title: titleIn,\n          content: message\n        }],\n        code: codeIn\n      };\n      this.dialog.openDialog(dialogMessage).then(reply => {});\n    }\n    setSongDetails(result) {\n      if (result) {\n        this.setSuggestionsFromTrack(result);\n        this.setTagsArray(result);\n      } else {\n        this.feedback('No Audio Metadata.', false);\n      }\n    }\n    setSuggestionsFromTrack(result) {\n      const arr = this.helper.getValuesFromKeys(result, this.suggestionKeys);\n      const uniques = this.helper.getOnlyUnique(arr);\n      const trimmed = this.helper.getTrimmedArray(uniques);\n      const lowered = this.helper.getLowerCaseArray(trimmed);\n      this.currentSuggestions = this.tagsSuggestion.concat(lowered);\n    }\n    setTagsArray(result) {\n      let tags = [];\n      if (result.comment) {\n        let tagsResult = '';\n        const comment = result.comment;\n        if (comment.text) {\n          tagsResult = comment.text;\n          tags = this.getCommentAsArray(tagsResult);\n        }\n      }\n      this.tagsArray = tags;\n    }\n    getCommentAsArray(comment) {\n      if (comment) {\n        const c = comment.toString();\n        let arr = c.split(',');\n        if (arr) {\n          arr = this.helper.getLowerCaseArray(arr);\n          return this.helper.getTrimmedArray(arr);\n        }\n      }\n      return [''];\n    }\n    getTagsFormatted() {\n      if (this.tagsArray) {\n        if (this.tagsArray.length) {\n          const trimedArr = this.tagsArray.map(str => str.trim().toLowerCase());\n          const tagString = trimedArr.join(',');\n          const updatedComment = {\n            language: 'eng',\n            shortText: '',\n            text: tagString\n          };\n          // library requires top object // I didn't realize and ruined some files :D\n          // update just edits tags added, write overwrites and deletes the rest\n          const tags = {\n            COMM: updatedComment,\n            comment: updatedComment\n          };\n          return tags;\n        }\n      }\n      return '';\n    }\n    setProgressAndFeedback(b, s, isImportant) {\n      this.isLoading = b;\n      if (!b) {\n        this.progress = 100;\n      }\n      if (b) {\n        this.progress = 0;\n        this.feedbackCounter = 0;\n      }\n      if (s) {\n        this.feedback(s, isImportant);\n      }\n    }\n    feedback(s, isImportant) {\n      if (isImportant && s) {\n        this.helper.feedback(JSON.stringify(s));\n      }\n      this.currentFeedback = s;\n    }\n    static #_ = this.ɵfac = function MusicTaggingComponent_Factory(t) {\n      return new (t || MusicTaggingComponent)(i0.ɵɵdirectiveInject(i1.ElectronCommunicatorService), i0.ɵɵdirectiveInject(i2.SuggestionService), i0.ɵɵdirectiveInject(i3.HelperService), i0.ɵɵdirectiveInject(i4.PopupService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MusicTaggingComponent,\n      selectors: [[\"app-music-tagging\"]],\n      hostBindings: function MusicTaggingComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keyup\", function MusicTaggingComponent_keyup_HostBindingHandler($event) {\n            return ctx.keyEvent($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      inputs: {\n        currentFile: \"currentFile\",\n        currentMetadataObject: \"currentMetadataObject\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 31,\n      vars: 14,\n      consts: [[1, \"container-fluid\"], [1, \"row\"], [3, \"suggestionsArray\", \"resultsArray\", \"isHorizontal\", \"isAddOnClick\", \"isAutoSort\", \"suggestionsArrayChange\"], [1, \"mini-button\"], [\"mat-mini-fab\", \"\", \"color\", \"warn\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", \"aria-label\", \"more\", 3, \"debounceTime\", \"debounceClick\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [1, \"checkbox\"], [3, \"ngModel\", \"ngModelChange\"], [1, \"row\", 2, \"color\", \"grey\"]],\n      template: function MusicTaggingComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 1);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"app-drag-edit-unique-chips\", 2);\n          i0.ɵɵlistener(\"suggestionsArrayChange\", function MusicTaggingComponent_Template_app_drag_edit_unique_chips_suggestionsArrayChange_6_listener($event) {\n            return ctx.currentSuggestions = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 3)(9, \"button\", 4);\n          i0.ɵɵlistener(\"debounceClick\", function MusicTaggingComponent_Template_button_debounceClick_9_listener() {\n            return ctx.saveSongData();\n          });\n          i0.ɵɵelementStart(10, \"mat-icon\");\n          i0.ɵɵtext(11, \"save\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(12, \"div\", 3)(13, \"button\", 5);\n          i0.ɵɵlistener(\"debounceClick\", function MusicTaggingComponent_Template_button_debounceClick_13_listener() {\n            return ctx.showMore();\n          });\n          i0.ɵɵelementStart(14, \"mat-icon\");\n          i0.ɵɵtext(15, \"open_in_new\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"div\", 3)(17, \"button\", 6);\n          i0.ɵɵlistener(\"debounceClick\", function MusicTaggingComponent_Template_button_debounceClick_17_listener() {\n            return ctx.playSong();\n          });\n          i0.ɵɵelementStart(18, \"mat-icon\");\n          i0.ɵɵtext(19, \"play_arrow\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(20, \"div\", 7)(21, \"mat-checkbox\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicTaggingComponent_Template_mat_checkbox_ngModelChange_21_listener($event) {\n            return ctx.isSort = $event;\n          });\n          i0.ɵɵtext(22, \"Auto Sort\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"div\", 7)(24, \"mat-checkbox\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicTaggingComponent_Template_mat_checkbox_ngModelChange_24_listener($event) {\n            return ctx.isSaveOnEnter = $event;\n          });\n          i0.ɵɵtext(25, \"Save On Enter\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(26, \"div\", 7)(27, \"mat-checkbox\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function MusicTaggingComponent_Template_mat_checkbox_ngModelChange_27_listener($event) {\n            return ctx.isAddOnClick = $event;\n          });\n          i0.ɵɵtext(28, \"Drag Add Remove\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"div\", 9);\n          i0.ɵɵtext(30);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.getFileName());\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.currentFile);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"suggestionsArray\", ctx.currentSuggestions)(\"resultsArray\", ctx.tagsArray)(\"isHorizontal\", true)(\"isAddOnClick\", ctx.isAddOnClick)(\"isAutoSort\", ctx.isSort);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.isSort);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.isSaveOnEnter);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.isAddOnClick);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.currentFeedback);\n        }\n      },\n      dependencies: [i5.NgControlStatus, i5.NgModel, i6.MatIcon, i7.MatMiniFabButton, i8.MatCheckbox, i9.DragEditUniqueChipsComponent, i10.AntiSpamClickDirective]\n    });\n  }\n  return MusicTaggingComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}