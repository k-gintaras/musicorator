{"ast":null,"code":"import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../music-tagging/suggestion.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/chips\";\nimport * as i4 from \"@angular/cdk/drag-drop\";\nimport * as i5 from \"@angular/material/icon\";\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction DragEditUniqueChipsComponent_div_0_mat_chip_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 13);\n    i0.ɵɵlistener(\"removed\", function DragEditUniqueChipsComponent_div_0_mat_chip_4_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const tag_r8 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.removeSuggestion(tag_r8));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"mat-icon\", 14);\n    i0.ɵɵtext(3, \"cancel\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tag_r8 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r3.getColorForArrayItem(tag_r8)))(\"removable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r8, \" \");\n  }\n}\nfunction DragEditUniqueChipsComponent_div_0_mat_chip_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 15);\n    i0.ɵɵlistener(\"removed\", function DragEditUniqueChipsComponent_div_0_mat_chip_9_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const tag_r12 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.remove(tag_r12));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"mat-icon\", 14);\n    i0.ɵɵtext(3, \"cancel\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tag_r12 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r5.getColorForArrayItem(tag_r12)))(\"removable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r12, \" \");\n  }\n}\nconst _c1 = function (a0) {\n  return [a0];\n};\nfunction DragEditUniqueChipsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2, 3);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function DragEditUniqueChipsComponent_div_0_Template_div_cdkDropListDropped_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.drop($event));\n    });\n    i0.ɵɵelementStart(3, \"mat-chip-list\");\n    i0.ɵɵtemplate(4, DragEditUniqueChipsComponent_div_0_mat_chip_4_Template, 4, 5, \"mat-chip\", 4);\n    i0.ɵɵelementStart(5, \"input\", 5);\n    i0.ɵɵlistener(\"matChipInputTokenEnd\", function DragEditUniqueChipsComponent_div_0_Template_input_matChipInputTokenEnd_5_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.addSuggestion($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelement(6, \"hr\");\n    i0.ɵɵelementStart(7, \"mat-chip-list\", 6, 7);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function DragEditUniqueChipsComponent_div_0_Template_mat_chip_list_cdkDropListDropped_7_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.drop($event));\n    });\n    i0.ɵɵtemplate(9, DragEditUniqueChipsComponent_div_0_mat_chip_9_Template, 4, 5, \"mat-chip\", 8);\n    i0.ɵɵelementStart(10, \"input\", 5);\n    i0.ɵɵlistener(\"matChipInputTokenEnd\", function DragEditUniqueChipsComponent_div_0_Template_input_matChipInputTokenEnd_10_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.add($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"mat-chip-list\", 9, 10)(13, \"mat-chip\");\n    i0.ɵɵtext(14, \" placeholder \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"mat-chip-list\", 9, 11)(17, \"mat-chip\");\n    i0.ɵɵtext(18, \" placeholder \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 12);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(2);\n    const _r4 = i0.ɵɵreference(8);\n    const _r6 = i0.ɵɵreference(12);\n    const _r7 = i0.ɵɵreference(16);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkDropListData\", ctx_r0.suggestionsArray)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(11, _c1, _r4));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.suggestionsArray);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matChipInputFor\", _r6)(\"matChipInputSeparatorKeyCodes\", ctx_r0.separatorKeysCodes);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkDropListData\", ctx_r0.resultsArray)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(13, _c1, _r2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.resultsArray);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matChipInputFor\", _r7)(\"matChipInputSeparatorKeyCodes\", ctx_r0.separatorKeysCodes);\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(ctx_r0.feedbackMessage);\n  }\n}\nfunction DragEditUniqueChipsComponent_div_1_mat_chip_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 17);\n    i0.ɵɵlistener(\"click\", function DragEditUniqueChipsComponent_div_1_mat_chip_3_Template_mat_chip_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const tag_r23 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25.tryAddValidated(null, tag_r23, ctx_r25.resultsArray));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tag_r23 = ctx.$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r21.getColorForArrayItem(tag_r23)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r23, \" \");\n  }\n}\nfunction DragEditUniqueChipsComponent_div_1_mat_chip_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 17);\n    i0.ɵɵlistener(\"click\", function DragEditUniqueChipsComponent_div_1_mat_chip_6_Template_mat_chip_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r30);\n      const tag_r27 = restoredCtx.$implicit;\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.remove(tag_r27));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tag_r27 = ctx.$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r22.getColorForArrayItem(tag_r27)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r27, \" \");\n  }\n}\nfunction DragEditUniqueChipsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\")(2, \"mat-chip-list\");\n    i0.ɵɵtemplate(3, DragEditUniqueChipsComponent_div_1_mat_chip_3_Template, 2, 4, \"mat-chip\", 16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"hr\");\n    i0.ɵɵelementStart(5, \"mat-chip-list\");\n    i0.ɵɵtemplate(6, DragEditUniqueChipsComponent_div_1_mat_chip_6_Template, 2, 4, \"mat-chip\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 12);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.suggestionsArray);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.resultsArray);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.feedbackMessage);\n  }\n}\nexport let DragEditUniqueChipsComponent = /*#__PURE__*/(() => {\n  class DragEditUniqueChipsComponent {\n    constructor(suggestionService) {\n      this.suggestionService = suggestionService;\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.resultsArray = [];\n      this.suggestionsArray = [];\n      this.isHorizontal = true;\n      this.hasFeedback = true;\n      this.isAddOnClick = true;\n      this.isAutoSort = false;\n      this.feedbackMessage = '';\n      this.isTimeoutSet = false;\n      this.colors = ['#6e40aa', '#7d3faf', '#8e3eb2', '#9e3db3', '#af3cb2', '#bf3caf', '#cf3da9', '#dd3fa2', '#ea4299', '#f5468e', '#fe4b83', '#ff5276', '#ff5a6a', '#ff635d', '#ff6d51', '#ff7847', '#ff833d', '#ff9036', '#f69d31', '#edaa2e', '#e2b72f', '#d7c432', '#ccd038', '#c1dc41', '#b7e64c', '#aff05b', '#9cf357', '#88f557', '#75f65a', '#63f75f', '#52f667', '#43f471', '#36f17c', '#2bec89', '#23e696', '#1ddfa3', '#1ad6b0', '#19cdbc', '#1bc2c7', '#1eb7d1', '#23abd8', '#2a9fde', '#3292e1', '#3a86e1', '#437ae0', '#4c6edb', '#5563d5', '#5d59cd', '#6450c3', '#6947b7'];\n    }\n    getColorForArrayItem(str) {\n      const i = this.getArrPosition(str, this.suggestionsArray);\n      // exists\n      if (i > -1) {\n        // we have enough colors\n        if (i < this.colors.length) {\n          return this.colors[i];\n        }\n      }\n      return 'grey';\n    }\n    ngOnInit() {\n      if (this.isAutoSort) {\n        this.sortArrayByLength(this.resultsArray);\n      }\n    }\n    ngOnChanges() {\n      if (this.isAutoSort) {\n        this.sortArrayByLength(this.resultsArray);\n      }\n    }\n    ngOnDestroy() {\n      if (this.currentTimeout) {\n        clearTimeout(this.currentTimeout);\n      }\n    }\n    // feedback(msg: string): void {\n    //\n    // }\n    drop(event) {\n      if (event.previousContainer === event.container) {\n        // moveItemInArray(\n        //   event.container.data,\n        //   event.previousIndex,\n        //   event.currentIndex\n        // );\n      } else {\n        const currentPick = event.previousContainer.data[event.previousIndex];\n        // copy if unique\n        // const unique = this.isNotIn(currentPick, this.resultsArray);\n        // if (unique) {\n        //   this.resultsArray.push(currentPick);\n        // } else {\n        //   this.feedback('Already added.');\n        // }\n        this.tryAddValidated(null, currentPick, this.resultsArray, false);\n      }\n    }\n    addSuggestion(event) {\n      const input = event.input;\n      const value = event.value;\n      this.tryAddValidated(input, value, this.suggestionsArray, true);\n      this.suggestionService.setSuggestionTagsAdd(value);\n    }\n    sortArrayByLength(arr) {\n      arr.sort((a, b) => {\n        // ASC  -> a.length - b.length\n        // DESC -> b.length - a.length\n        return a.length - b.length;\n      });\n    }\n    tryAddValidated(input, value, arr, isSuggestions) {\n      const unique = this.isNotIn(value, arr);\n      if (unique) {\n        if ((value || '').trim()) {\n          arr.push(value.trim().toLowerCase());\n        }\n        if (input) {\n          input.value = '';\n        }\n      } else {\n        this.feedback('Already added.');\n      }\n      if (this.isAutoSort) {\n        this.sortArrayByLength(this.resultsArray);\n      }\n    }\n    removeSuggestion(tag) {\n      const index = this.suggestionsArray.indexOf(tag);\n      if (index >= 0) {\n        this.suggestionsArray.splice(index, 1);\n        this.suggestionService.setSuggestionTagsRemove(tag);\n      }\n    }\n    add(event) {\n      const input = event.input;\n      const value = event.value;\n      this.tryAddValidated(input, value, this.resultsArray, false);\n    }\n    remove(tag) {\n      const index = this.resultsArray.indexOf(tag);\n      if (index >= 0) {\n        this.resultsArray.splice(index, 1);\n      }\n    }\n    // only add if unique\n    isNotIn(val, arr) {\n      return !(arr.indexOf(val) > -1);\n    }\n    getArrPosition(val, arr) {\n      return arr.indexOf(val);\n    }\n    feedback(s) {\n      if (this.hasFeedback) {\n        this.clearMessageSafely();\n      }\n      this.feedbackMessage = s;\n    }\n    clearMessageSafely() {\n      if (!this.isTimeoutSet) {\n        this.isTimeoutSet = true;\n        this.currentTimeout = setTimeout(() => {\n          this.feedbackMessage = '';\n          this.isTimeoutSet = false;\n        }, 3000);\n      }\n    }\n    static #_ = this.ɵfac = function DragEditUniqueChipsComponent_Factory(t) {\n      return new (t || DragEditUniqueChipsComponent)(i0.ɵɵdirectiveInject(i1.SuggestionService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DragEditUniqueChipsComponent,\n      selectors: [[\"app-drag-edit-unique-chips\"]],\n      inputs: {\n        resultsArray: \"resultsArray\",\n        suggestionsArray: \"suggestionsArray\",\n        isHorizontal: \"isHorizontal\",\n        hasFeedback: \"hasFeedback\",\n        isAddOnClick: \"isAddOnClick\",\n        isAutoSort: \"isAutoSort\",\n        feedbackMessage: \"feedbackMessage\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 2,\n      vars: 2,\n      consts: [[\"style\", \"position: relative\", 4, \"ngIf\"], [2, \"position\", \"relative\"], [\"cdkDropList\", \"\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"suggestions\", \"cdkDropList\"], [\"cdkDrag\", \"\", \"style\", \"color: white\", 3, \"ngStyle\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"New Type...\", 3, \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputTokenEnd\"], [\"cdkDropList\", \"\", 1, \"example-chip\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"results\", \"cdkDropList\"], [\"class\", \"example-box\", \"cdkDrag\", \"\", \"style\", \"color: white\", 3, \"ngStyle\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [2, \"display\", \"none\"], [\"suggestions2\", \"\"], [\"results2\", \"\"], [1, \"mini-feedback\"], [\"cdkDrag\", \"\", 2, \"color\", \"white\", 3, \"ngStyle\", \"removable\", \"removed\"], [\"matChipRemove\", \"\"], [\"cdkDrag\", \"\", 1, \"example-box\", 2, \"color\", \"white\", 3, \"ngStyle\", \"removable\", \"removed\"], [\"style\", \"color: white\", 3, \"ngStyle\", \"click\", 4, \"ngFor\", \"ngForOf\"], [2, \"color\", \"white\", 3, \"ngStyle\", \"click\"]],\n      template: function DragEditUniqueChipsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, DragEditUniqueChipsComponent_div_0_Template, 21, 15, \"div\", 0);\n          i0.ɵɵtemplate(1, DragEditUniqueChipsComponent_div_1_Template, 9, 3, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.isAddOnClick);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isAddOnClick);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle, i3.MatChip, i3.MatChipInput, i3.MatChipRemove, i4.CdkDropList, i4.CdkDrag, i5.MatIcon]\n    });\n  }\n  return DragEditUniqueChipsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}