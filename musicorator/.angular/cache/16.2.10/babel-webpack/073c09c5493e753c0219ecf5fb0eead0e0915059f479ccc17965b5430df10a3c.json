{"ast":null,"code":"import { ValidRequest } from '../ValidRequest';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../communicator-electron.service\";\nimport * as i2 from \"../data-processor.service\";\nimport * as i3 from \"../helper.service\";\nimport * as i4 from \"../popup/popup.service\";\nimport * as i5 from \"../test-data.service\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"../anti-spam-click.directive\";\nimport * as i9 from \"../suggestion-filter/suggestion-filter.component\";\nimport * as i10 from \"../progress/progress.component\";\nexport let FilteringComponent = /*#__PURE__*/(() => {\n  class FilteringComponent {\n    constructor(electronCommunicator, assistant, helper, dialog, test) {\n      this.electronCommunicator = electronCommunicator;\n      this.assistant = assistant;\n      this.helper = helper;\n      this.dialog = dialog;\n      this.test = test;\n      // get file customizations\n      this.isGetAllData = true;\n      this.currentFileType = '.mp3';\n      this.feedbackMessage = '';\n      // files\n      this.currentFolder = '';\n      this.currentFiles = [];\n      // audio matrix\n      this.matrixTitles = [];\n      this.matrix = [];\n      this.filteredMatrix = [];\n      this.matrixForCsv = [];\n      this.filteredFiles = [];\n      // progress\n      this.maxProgress = 100;\n    }\n    // TODO: on matrix filter, let matrix reset, because otherwise matrix just gets reduced to nothing\n    // button reset matrix ?\n    ngOnInit() {\n      this.electronSubscriptions = [];\n      this.electronSubscriptions.push(this.setElectronListener());\n      this.electronSubscriptions.push(this.setFeedbackListener());\n      this.assistant.loadSettings(this.getFeedback());\n      // this.loadTestMatrix();\n    }\n    // loadTestMatrix() {\n    //   const data = this.test.testData2;\n    //   const result = this.assistant.getMetadataMatrix(\n    //     data,\n    //     this.suggestionObject\n    //   );\n    //   this.matrixTitles = result[0];\n    //   this.matrix = result[1];\n    //   this.filteredMatrix = result[1];\n    //   // console.log(response);\n    //   this.feedback('Got All Music From Directory.');\n    //   this.maxProgress = 0;\n    // }\n    ngOnDestroy() {\n      this.assistant.setUnsubscribeTidyWithElectron(this.electronSubscriptions);\n    }\n    setFeedbackListener() {\n      return this.assistant.getFeedbackSubscription().subscribe(r => {\n        this.feedbackMessage = r;\n      });\n    }\n    onFolderUpdate(name) {\n      this.currentNewFolder = name;\n    }\n    onMatrixUpdate(matrix) {\n      this.matrixForCsv = matrix;\n    }\n    onFilesUpdate(files) {\n      this.filteredFiles = files;\n    }\n    openFolder() {\n      this.assistant.openFolder(this.getFeedback());\n    }\n    loadSettings() {\n      this.assistant.loadSettings(this.getFeedback());\n    }\n    loadMusicFiles(folders) {\n      this.assistant.loadAllMusicFiles(folders, this.getFeedback());\n    }\n    makeDirectory(where, name) {\n      this.assistant.makeDir(where, name, this.getFeedback());\n    }\n    copyDirectory(folderIn, nameIn, foldersIn) {\n      this.assistant.copyDirectory(folderIn, nameIn, foldersIn, this.getFeedback());\n    }\n    playSong(file) {\n      this.assistant.playSong(file, this.getFeedback());\n    }\n    getFilesByType(file, fileContains) {\n      this.assistant.getFilesByType(file, fileContains, this.getFeedback());\n    }\n    getSongData(file) {\n      this.assistant.getSongData(file, this.getFeedback());\n    }\n    saveSongData(file, tags) {\n      this.assistant.saveSongData(file, tags, this.getFeedback());\n    }\n    copyToFolder() {\n      if (this.filteredFiles.length > 0) {\n        this.copyDirectory(this.currentFolder, this.currentNewFolder, this.filteredFiles);\n      }\n    }\n    moveToFolder() {\n      // TODO: copy folder version, move folder, is it really needed?\n    }\n    showCsv() {\n      const csvMatrix = [this.matrixTitles].concat(this.matrixForCsv);\n      const csv = this.helper.getCsvFromMatrix(csvMatrix);\n      this.showPopup('CSV', '', csv);\n    }\n    playPlaylist() {\n      const file = this.filteredFiles;\n      if (file) {\n        this.assistant.playPlaylist(file, res => {\n          this.helper.feedback(res);\n        });\n      }\n    }\n    showPopup(titleIn, message, codeIn) {\n      const dialogMessage = {\n        title: titleIn,\n        list: [{\n          title: titleIn,\n          content: message\n        }],\n        code: codeIn\n      };\n      this.dialog.openDialog(dialogMessage).then(reply => {});\n    }\n    getFeedback() {\n      return msg => {\n        this.feedback(msg);\n      };\n    }\n    feedback(msg) {\n      this.feedbackMessage = JSON.stringify(msg);\n    }\n    /**\n     * responseFromMain\n     * {key: string, response: any}\n     */\n    setElectronListener() {\n      return this.electronCommunicator.listenToElectronResponsibly('responseFromMain').subscribe(result => {\n        if (result) {\n          this.handleResponse(result);\n        } else {}\n      });\n    }\n    handleResponse(result) {\n      const key = result.key;\n      const response = result.response;\n      if (key) {\n        switch (key) {\n          case ValidRequest.openDirectory:\n            this.handleOpenFolderResponse(response);\n            break;\n          case ValidRequest.getSettings:\n            this.handleSettingsResponse(response);\n            break;\n          case ValidRequest.getAllMusicData:\n            this.handleGetMusicDataResponse(response);\n            break;\n          case ValidRequest.getFilesByType:\n            if (this.isGetAllData) {\n              this.handleGetFilesResponseAll(response);\n            } else {\n              this.handleGetFilesResponse(response);\n            }\n            break;\n          case ValidRequest.getFeedback:\n            this.assistant.setFeedback(true, response);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    handleSettingsResponse(response) {\n      if (response) {\n        if (response.tags) {\n          this.suggestionsJson = response.tags;\n          this.suggestionObject = this.assistant.getSuggestionsAsObject(response.tags);\n          this.suggestionMatrix = this.assistant.getSuggestionsAsMatrix(response.tags);\n        }\n      }\n    }\n    handleOpenFolderResponse(response) {\n      if (response) {\n        this.resetVariables();\n        this.currentFolder = response;\n        this.feedback('Opened Directory.');\n        // dont load instantly\n        setTimeout(() => {\n          this.getFilesByType(this.currentFolder, this.currentFileType);\n        }, 500);\n      }\n    }\n    handleGetMusicDataResponse(response) {\n      if (response) {\n        const result = this.assistant.getMetadataMatrix(response, this.suggestionObject);\n        this.matrixTitles = result[0];\n        this.matrix = result[1];\n        this.filteredMatrix = result[1];\n        this.feedback('Got All Music From Directory.');\n        this.maxProgress = 0;\n      }\n    }\n    handleGetFilesResponse(response) {\n      if (response) {\n        this.currentFiles = response;\n        this.feedback('Got Files From Directory.');\n      }\n    }\n    handleGetFilesResponseAll(response) {\n      if (response) {\n        this.currentFiles = response;\n        this.assistant.setMaxForFeedback(this.currentFiles.length);\n        this.maxProgress = this.currentFiles.length;\n        this.feedback('Got Files From Directory.');\n        // dont load instantly\n        setTimeout(() => {\n          this.loadMusicFiles(this.currentFiles);\n        }, 500);\n      }\n    }\n    resetVariables() {\n      this.currentFolder = '';\n      this.currentFiles = [];\n    }\n    static #_ = this.ɵfac = function FilteringComponent_Factory(t) {\n      return new (t || FilteringComponent)(i0.ɵɵdirectiveInject(i1.CommunicatorElectronService), i0.ɵɵdirectiveInject(i2.DataProcessorService), i0.ɵɵdirectiveInject(i3.HelperService), i0.ɵɵdirectiveInject(i4.PopupService), i0.ɵɵdirectiveInject(i5.TestDataService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FilteringComponent,\n      selectors: [[\"app-filtering\"]],\n      decls: 14,\n      vars: 12,\n      consts: [[3, \"suggestionMatrix\", \"suggestionObject\", \"matrixTitles\", \"matrix\", \"filteredMatrix\", \"folderChange\", \"filesChange\", \"matrixChange\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [\"mat-fab\", \"\", \"color\", \"warn\", \"appAntiSpamClick\", \"\", \"aria-label\", \"Play\", 3, \"debounceTime\", \"debounceClick\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"appAntiSpamClick\", \"\", 3, \"debounceTime\", \"debounceClick\"], [3, \"currentFeedback\", \"max\"]],\n      template: function FilteringComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"app-suggestion-filter\", 0);\n          i0.ɵɵlistener(\"folderChange\", function FilteringComponent_Template_app_suggestion_filter_folderChange_0_listener($event) {\n            return ctx.onFolderUpdate($event);\n          })(\"filesChange\", function FilteringComponent_Template_app_suggestion_filter_filesChange_0_listener($event) {\n            return ctx.onFilesUpdate($event);\n          })(\"matrixChange\", function FilteringComponent_Template_app_suggestion_filter_matrixChange_0_listener($event) {\n            return ctx.onMatrixUpdate($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(1, \"span\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"button\", 3);\n          i0.ɵɵlistener(\"debounceClick\", function FilteringComponent_Template_button_debounceClick_4_listener() {\n            return ctx.openFolder();\n          });\n          i0.ɵɵelementStart(5, \"mat-icon\");\n          i0.ɵɵtext(6, \"folder_open\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 4);\n          i0.ɵɵlistener(\"debounceClick\", function FilteringComponent_Template_button_debounceClick_7_listener() {\n            return ctx.copyToFolder();\n          });\n          i0.ɵɵtext(8, \" Copy Files \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 4);\n          i0.ɵɵlistener(\"debounceClick\", function FilteringComponent_Template_button_debounceClick_9_listener() {\n            return ctx.showCsv();\n          });\n          i0.ɵɵtext(10, \" Get CSV \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 4);\n          i0.ɵɵlistener(\"debounceClick\", function FilteringComponent_Template_button_debounceClick_11_listener() {\n            return ctx.playPlaylist();\n          });\n          i0.ɵɵtext(12, \" Play \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"app-progress\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"suggestionMatrix\", ctx.suggestionMatrix)(\"suggestionObject\", ctx.suggestionObject)(\"matrixTitles\", ctx.matrixTitles)(\"matrix\", ctx.matrix)(\"filteredMatrix\", ctx.filteredMatrix);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.feedbackMessage, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"debounceTime\", 300);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"currentFeedback\", ctx.feedbackMessage)(\"max\", ctx.maxProgress);\n        }\n      },\n      dependencies: [i6.MatIcon, i7.MatButton, i7.MatFabButton, i8.AntiSpamClickDirective, i9.SuggestionFilterComponent, i10.ProgressComponent]\n    });\n  }\n  return FilteringComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}