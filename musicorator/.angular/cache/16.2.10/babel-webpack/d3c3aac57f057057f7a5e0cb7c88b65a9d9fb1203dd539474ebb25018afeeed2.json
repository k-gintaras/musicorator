{"ast":null,"code":"import { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../electron-communicator.service\";\nimport * as i2 from \"../helper.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/cdk/drag-drop\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/progress-bar\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/tabs\";\nconst _c0 = function () {\n  return {\n    \"background-color\": \"grey\"\n  };\n};\nfunction SuggestionManagerComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(2, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r11, \" \");\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction SuggestionManagerComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r3.bigMatrix.colors[i_r14]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r13.group, \" \");\n  }\n}\nfunction SuggestionManagerComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r15 = ctx.$implicit;\n    const i_r16 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r5.bigMatrix.colors[i_r16]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r15.name, \" \");\n  }\n}\nfunction SuggestionManagerComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, item_r17.color));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r17.name, \" \");\n  }\n}\nfunction SuggestionManagerComponent_div_79_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r18 = ctx.$implicit;\n    const i_r19 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r9.bigMatrix.colors[i_r19]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r18, \" \");\n  }\n}\nfunction SuggestionManagerComponent_div_86_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Loading... \");\n    i0.ɵɵelement(2, \"mat-progress-bar\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r10.progress);\n  }\n}\nconst _c2 = function (a0) {\n  return [a0];\n};\nexport let SuggestionManagerComponent = /*#__PURE__*/(() => {\n  class SuggestionManagerComponent {\n    constructor(communicator, helper) {\n      this.communicator = communicator;\n      this.helper = helper;\n      this.groups = [];\n      this.bigMatrix = {\n        names: [],\n        colors: [],\n        groups: []\n      };\n      this.suggestionsBin = [];\n      this.groupsBin = ['placeholder'];\n      // other\n      this.subscriptions = [];\n      this.currentName = '';\n      this.currentGroupName = '';\n      this.currentColorArrayString = '';\n      this.defaultColors = '#6e40aa, #7d3faf, #8e3eb2, #9e3db3, #af3cb2, #bf3caf, #cf3da9, #dd3fa2, #ea4299, #f5468e, #fe4b83, #ff5276, #ff5a6a, #ff635d, #ff6d51, #ff7847, #ff833d, #ff9036, #f69d31, #edaa2e, #e2b72f, #d7c432, #ccd038, #c1dc41, #b7e64c, #aff05b, #9cf357, #88f557, #75f65a, #63f75f, #52f667, #43f471, #36f17c, #2bec89, #23e696, #1ddfa3, #1ad6b0, #19cdbc, #1bc2c7, #1eb7d1, #23abd8, #2a9fde, #3292e1, #3a86e1, #437ae0, #4c6edb, #5563d5, #5d59cd, #6450c3, #6947b7';\n    }\n    ngOnInit() {\n      this.loadSettings();\n      this.setProgressAndFeedback(false, '', false);\n      this.subscriptions = [];\n      this.subscriptions.push(this.setGetSettingsListener());\n      this.subscriptions.push(this.setSaveSettingsListener());\n    }\n    getSettingsRemapped() {\n      const settingsObject = {};\n      const cols = this.bigMatrix.colors;\n      for (let j = 0; j < this.suggestionsAsArray.length; j++) {\n        const suggestion = this.suggestionsAsArray[j];\n        let c = 'grey';\n        if (j < cols.length) {\n          c = cols[j];\n        }\n        const remapped = {\n          color: c,\n          group: suggestion.group,\n          i: j\n        };\n        settingsObject[suggestion.name] = remapped;\n      }\n      return settingsObject;\n    }\n    saveSettings() {\n      const tags = this.getSettingsRemapped();\n      this.settingsFileObject.tags = tags;\n      const options = {\n        key: 'saveSettings',\n        data: this.settingsFileObject\n      };\n      this.setProgressAndFeedback(true, 'Getting Settings...', false);\n      this.communicator.sendToElectron(options);\n    }\n    addTag() {\n      if (this.currentName && this.currentName) {\n        const o = {\n          name: this.currentName,\n          group: this.currentGroupName,\n          color: 'grey'\n        };\n        const unique = this.isUniqueObject(o, 'name', this.suggestionsAsArray);\n        if (unique) {\n          this.suggestionsAsArray.push(o);\n          this.feedback('Added To The Bottom', true);\n        } else {\n          this.feedback('Already Added', true);\n        }\n        this.addUniqueItem(this.groups, this.currentGroupName);\n      } else {\n        this.feedback('Will not add empty.', true);\n      }\n    }\n    setNewColors() {\n      this.bigMatrix.colors = this.currentColorArrayString.split(',');\n    }\n    setDefaultColors() {\n      this.bigMatrix.colors = this.defaultColors.split(',');\n    }\n    setSaveSettingsListener() {\n      return this.communicator.listenToElectronConstantly('saveSettings').subscribe(result => {\n        this.setProgressAndFeedback(false, 'Saved Settings.', true);\n      });\n    }\n    ngOnDestroy() {\n      for (const subscription of this.subscriptions) {\n        if (subscription) {\n          try {\n            subscription.unsubscribe();\n          } catch (error) {}\n        }\n      }\n    }\n    addUniqueItem(arr, item) {\n      if (arr.indexOf(item) === -1) {\n        arr.push(item);\n      }\n    }\n    setGetSettingsListener() {\n      return this.communicator.listenToElectronConstantly('getSettings').subscribe(result => {\n        if (result) {\n          this.settingsFileObject = result;\n          this.suggestionsFromFile = this.settingsFileObject.tags;\n          this.suggestionsAsArray = this.getSuggestionsAsArray();\n          this.suggestionsAsMatrix = this.getSuggestionsAsMatrix();\n          this.bigMatrix = this.getSuggestionsAsBigMatrix();\n          this.groups = this.getGroups();\n          this.currentColorArrayString = this.bigMatrix.colors.join(',');\n          this.setProgressAndFeedback(false, 'Got Settings.', false);\n        } else {\n          this.setProgressAndFeedback(false, 'Get Settings Failed.', false);\n        }\n      });\n    }\n    getSuggestionsAsArray() {\n      const keys = Object.keys(this.suggestionsFromFile);\n      const arr = new Array(keys.length);\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      return arr;\n    }\n    getGroups() {\n      const arr = [];\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        this.addUniqueItem(arr, val.group);\n      });\n      return arr;\n    }\n    getSuggestionsAsBigMatrix() {\n      const arr = {\n        names: [],\n        colors: [],\n        groups: []\n      };\n      const names = [];\n      const colors = [];\n      const groups = [];\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        names.push(key);\n        colors.push(val.color);\n        groups.push(val.group);\n      });\n      arr.names = names;\n      arr.colors = colors;\n      arr.groups = groups;\n      return arr;\n    }\n    getSuggestionsAsMatrix() {\n      const keys = Object.keys(this.suggestionsFromFile);\n      const arr = new Array(keys.length);\n      Object.keys(this.suggestionsFromFile).forEach(key => {\n        const val = this.suggestionsFromFile[key];\n        arr[val.i] = {\n          name: key,\n          color: val.color,\n          group: val.group\n        };\n      });\n      let currentGroup = arr[0].group;\n      const matrix = [];\n      let currentRow = [];\n      for (const suggestionObj of arr) {\n        const group = suggestionObj.group;\n        if (currentGroup !== group) {\n          matrix.push({\n            title: currentGroup,\n            value: currentRow\n          });\n          currentGroup = group;\n          currentRow = [];\n        }\n        currentRow.push(suggestionObj);\n      }\n      // last push\n      matrix.push({\n        title: currentGroup,\n        value: currentRow\n      });\n      return matrix;\n    }\n    loadSettings() {\n      const options = {\n        key: 'getSettings'\n      };\n      this.setProgressAndFeedback(true, 'Getting Settings...', false);\n      this.communicator.sendToElectron(options);\n    }\n    setProgressAndFeedback(b, s, isImportant) {\n      this.isLoading = b;\n      if (!b) {\n        this.progress = 100;\n      }\n      if (b) {\n        this.progress = 0;\n        this.feedbackCounter = 0;\n      }\n      if (s) {\n        this.feedback(s, isImportant);\n      }\n    }\n    getFeedBack() {\n      return this.currentFeedback;\n    }\n    feedback(s, isImportant) {\n      if (isImportant) {\n        this.helper.feedback(JSON.stringify(s));\n      }\n      this.currentFeedback = JSON.stringify(s);\n    }\n    groupGroups() {\n      this.suggestionsAsArray = this.groupByArrayKey(this.suggestionsAsArray, 'group');\n    }\n    /**\n     *\n     * https://stackoverflow.com/questions/14446511/most-efficient-method-to-groupby-on-an-array-of-objects\n     * @description\n     * Takes an Array<V>, and a grouping function,\n     * and returns a Map of the array grouped by the grouping function.\n     *\n     * @param list An array of type V.\n     * @param keyGetter A Function that takes the the Array type V as an input, and returns a value of type K.\n     *                  K is generally intended to be a property key of V.\n     *\n     * @returns Map of the array grouped by the grouping function.\n     */\n    // export function groupBy<K, V>(list: Array<V>, keyGetter: (input: V) => K): Map<K, Array<V>> {\n    //    const map = new Map<K, Array<V>>();\n    groupBy(list, keyGetter) {\n      const map = new Map();\n      list.forEach(item => {\n        const key = keyGetter(item);\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      return map;\n    }\n    groupByArray(list, keyGetter) {\n      const map = new Map();\n      list.forEach(item => {\n        const key = keyGetter(item);\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      const valueMatrix = map.values();\n      const arr = [];\n      for (const valueArray of valueMatrix) {\n        arr.concat(valueArray);\n      }\n      return arr;\n    }\n    groupByArrayKey(list, keyToSearch) {\n      const map = new Map();\n      list.forEach(item => {\n        const key = item[keyToSearch];\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      const valueMatrix = map.values();\n      let arr = [];\n      for (const valueArray of valueMatrix) {\n        arr = arr.concat(valueArray);\n      }\n      return arr;\n    }\n    drop(event) {\n      const isUnique = this.isUniqueObject(event.previousContainer.data[event.previousIndex], 'name', event.container.data);\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      } else {\n        if (isUnique) {\n          transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n        } else {\n          this.feedback('Already Added', true);\n        }\n      }\n    }\n    // TODO: useful\n    isUniqueObject(itemObjectToAdd, keyToSearch, arrayOfObjects) {\n      for (const o of arrayOfObjects) {\n        const name = o[keyToSearch];\n        if (name === itemObjectToAdd[keyToSearch]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    dropGroup(event) {\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        this.moveGroup(event.container.data[event.currentIndex], event.currentIndex);\n      }\n    }\n    moveGroup(group, i) {\n      this.suggestionsAsArray = this.getMovedGroup(this.suggestionsAsArray, 'group', group, i);\n    }\n    // TODO: useful for managing jsons\n    getMovedGroup(arr, groupKey, groupValue, i) {\n      if (i === 0) {\n        // just move to top\n        return this.moveArrayObjectGroup(arr, groupKey, groupValue, 0);\n      }\n      if (i === this.groups.length - 1) {\n        // just move to bottom\n        return this.moveArrayObjectGroup(arr, groupKey, groupValue, arr.length - 1);\n      }\n      if (i > 0 && i < this.groups.length - 1) {\n        const previous = this.groups[i + 1];\n        for (let j = 0; j < arr.length; j++) {\n          const cur = arr[j];\n          if (cur.group === previous) {\n            return this.moveArrayObjectGroup(arr, groupKey, groupValue, j);\n          }\n        }\n      }\n      return arr;\n    }\n    moveArrayObjectGroup(arrayToProcess, keyToProcess, keyValueToFind, i) {\n      const filteredWithout = arrayToProcess.filter(row => {\n        return row[keyToProcess] !== keyValueToFind;\n      });\n      const filteredWith = arrayToProcess.filter(row => {\n        return row[keyToProcess] === keyValueToFind;\n      });\n      filteredWithout.splice(i, 0, ...filteredWith);\n      return filteredWithout;\n    }\n    static #_ = this.ɵfac = function SuggestionManagerComponent_Factory(t) {\n      return new (t || SuggestionManagerComponent)(i0.ɵɵdirectiveInject(i1.ElectronCommunicatorService), i0.ɵɵdirectiveInject(i2.HelperService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SuggestionManagerComponent,\n      selectors: [[\"app-suggestion-manager\"]],\n      decls: 87,\n      vars: 28,\n      consts: [[1, \"container-fluid\"], [1, \"row\"], [\"label\", \"Manage Groups\"], [2, \"padding\", \"25px\"], [\"cdkDropList\", \"\", 1, \"drag-container\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"suggestionsList\", \"cdkDropList\"], [\"class\", \"drag-box\", \"cdkDrag\", \"\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"label\", \"Manage Suggestions\"], [2, \"margin\", \"25px\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"primary\", \"mat-mini-fab\", \"\", 3, \"click\"], [1, \"col-3\"], [\"cdkDropList\", \"\", 1, \"drag-container\", 3, \"cdkDropListConnectedTo\", \"cdkDropListData\", \"cdkDropListDropped\"], [\"suggestionsList2\", \"cdkDropList\"], [2, \"visibility\", \"hidden\", \"height\", \"20px\"], [\"suggestionsList1\", \"cdkDropList\"], [\"binList\", \"cdkDropList\"], [\"label\", \"Manage Colors\"], [2, \"margin\", \"10px\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"cdkDropList\", \"\", 1, \"example-list\", 3, \"cdkDropListData\", \"cdkDropListDropped\"], [1, \"footer-feedback\", 2, \"color\", \"grey\"], [1, \"footer\"], [\"mat-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [4, \"ngIf\"], [\"cdkDrag\", \"\", 1, \"drag-box\", 3, \"ngStyle\"], [\"mode\", \"determinate\", 3, \"value\"]],\n      template: function SuggestionManagerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"mat-tab-group\", 0)(3, \"mat-tab\", 2)(4, \"div\", 3)(5, \"div\", 1)(6, \"h2\");\n          i0.ɵɵtext(7, \"Groups\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 1)(9, \"div\", 4, 5);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function SuggestionManagerComponent_Template_div_cdkDropListDropped_9_listener($event) {\n            return ctx.dropGroup($event);\n          });\n          i0.ɵɵtemplate(11, SuggestionManagerComponent_div_11_Template, 2, 3, \"div\", 6);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(12, \"mat-tab\", 7)(13, \"div\", 3)(14, \"div\", 1)(15, \"h2\");\n          i0.ɵɵtext(16, \"Suggestions\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 1)(18, \"div\", 8)(19, \"mat-form-field\")(20, \"mat-label\");\n          i0.ɵɵtext(21, \"Group\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function SuggestionManagerComponent_Template_input_ngModelChange_22_listener($event) {\n            return ctx.currentGroupName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"mat-form-field\")(24, \"mat-label\");\n          i0.ɵɵtext(25, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function SuggestionManagerComponent_Template_input_ngModelChange_26_listener($event) {\n            return ctx.currentName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(27, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function SuggestionManagerComponent_Template_button_click_27_listener() {\n            return ctx.addTag();\n          });\n          i0.ɵɵelementStart(28, \"mat-icon\");\n          i0.ɵɵtext(29, \"add\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(30, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function SuggestionManagerComponent_Template_button_click_30_listener() {\n            return ctx.groupGroups();\n          });\n          i0.ɵɵelementStart(31, \"mat-icon\");\n          i0.ɵɵtext(32, \"sort\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(33, \"div\", 1)(34, \"div\", 11)(35, \"h2\");\n          i0.ɵɵtext(36, \"Groups\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"div\", 12, 13);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function SuggestionManagerComponent_Template_div_cdkDropListDropped_37_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(39, SuggestionManagerComponent_div_39_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(40, \"div\", 14);\n          i0.ɵɵtext(41, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(42, \"div\", 11)(43, \"h2\");\n          i0.ɵɵtext(44, \"Names\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(45, \"div\", 4, 15);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function SuggestionManagerComponent_Template_div_cdkDropListDropped_45_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(47, SuggestionManagerComponent_div_47_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(48, \"div\", 14);\n          i0.ɵɵtext(49, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(50, \"div\", 11)(51, \"h2\");\n          i0.ɵɵtext(52, \"Bin\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\", 12, 16);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function SuggestionManagerComponent_Template_div_cdkDropListDropped_53_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(55, SuggestionManagerComponent_div_55_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementStart(56, \"div\", 14);\n          i0.ɵɵtext(57, \" Placeholder if Empty \");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(58, \"mat-tab\", 17)(59, \"div\", 3)(60, \"div\", 1)(61, \"h2\");\n          i0.ɵɵtext(62, \"Suggestions\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(63, \"div\", 1)(64, \"div\", 18)(65, \"mat-form-field\")(66, \"mat-label\");\n          i0.ɵɵtext(67, \"Color Array String\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(68, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function SuggestionManagerComponent_Template_input_ngModelChange_68_listener($event) {\n            return ctx.currentColorArrayString = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(69, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function SuggestionManagerComponent_Template_button_click_69_listener() {\n            return ctx.setNewColors();\n          });\n          i0.ɵɵelementStart(70, \"mat-icon\");\n          i0.ɵɵtext(71, \"save\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(72, \"button\", 20);\n          i0.ɵɵlistener(\"click\", function SuggestionManagerComponent_Template_button_click_72_listener() {\n            return ctx.setDefaultColors();\n          });\n          i0.ɵɵtext(73, \" Set Default Colors \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(74, \"div\", 11)(75, \"h2\");\n          i0.ɵɵtext(76, \"Colors\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(77, \"div\", 21, 5);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function SuggestionManagerComponent_Template_div_cdkDropListDropped_77_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(79, SuggestionManagerComponent_div_79_Template, 2, 4, \"div\", 6);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(80, \"span\", 22);\n          i0.ɵɵtext(81);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(82, \"div\", 23)(83, \"button\", 24);\n          i0.ɵɵlistener(\"click\", function SuggestionManagerComponent_Template_button_click_83_listener() {\n            return ctx.saveSettings();\n          });\n          i0.ɵɵelementStart(84, \"mat-icon\");\n          i0.ɵɵtext(85, \"save\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(86, SuggestionManagerComponent_div_86_Template, 3, 1, \"div\", 25);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          const _r4 = i0.ɵɵreference(46);\n          const _r6 = i0.ɵɵreference(54);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"@.disabled\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.groups)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(20, _c2, _r6));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.groups);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentGroupName);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentName);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(22, _c2, _r6))(\"cdkDropListData\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.suggestionsAsArray)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(24, _c2, _r6));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsAsArray);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(26, _c2, _r4))(\"cdkDropListData\", ctx.suggestionsBin);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.suggestionsBin);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngModel\", ctx.currentColorArrayString);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.bigMatrix.colors);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.bigMatrix.colors);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" Last action: \", ctx.currentFeedback, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i3.NgStyle, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.CdkDropList, i5.CdkDrag, i6.MatIcon, i7.MatButton, i7.MatMiniFabButton, i7.MatFabButton, i8.MatProgressBar, i9.MatInput, i10.MatFormField, i10.MatLabel, i11.MatTab, i11.MatTabGroup]\n    });\n  }\n  return SuggestionManagerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}